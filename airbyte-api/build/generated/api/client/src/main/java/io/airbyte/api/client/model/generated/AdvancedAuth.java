/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.OAuthConfigSpecification;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * AdvancedAuth
 */
@JsonPropertyOrder({
  AdvancedAuth.JSON_PROPERTY_AUTH_FLOW_TYPE,
  AdvancedAuth.JSON_PROPERTY_PREDICATE_KEY,
  AdvancedAuth.JSON_PROPERTY_PREDICATE_VALUE,
  AdvancedAuth.JSON_PROPERTY_OAUTH_CONFIG_SPECIFICATION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class AdvancedAuth {
  /**
   * Gets or Sets authFlowType
   */
  public enum AuthFlowTypeEnum {
    OAUTH2_0("oauth2.0"),
    
    OAUTH1_0("oauth1.0");

    private String value;

    AuthFlowTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AuthFlowTypeEnum fromValue(String value) {
      for (AuthFlowTypeEnum b : AuthFlowTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AUTH_FLOW_TYPE = "authFlowType";
  private AuthFlowTypeEnum authFlowType;

  public static final String JSON_PROPERTY_PREDICATE_KEY = "predicateKey";
  private List<String> predicateKey = null;

  public static final String JSON_PROPERTY_PREDICATE_VALUE = "predicateValue";
  private String predicateValue;

  public static final String JSON_PROPERTY_OAUTH_CONFIG_SPECIFICATION = "oauthConfigSpecification";
  private OAuthConfigSpecification oauthConfigSpecification;

  public AdvancedAuth() { 
  }

  public AdvancedAuth authFlowType(AuthFlowTypeEnum authFlowType) {
    this.authFlowType = authFlowType;
    return this;
  }

   /**
   * Get authFlowType
   * @return authFlowType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AUTH_FLOW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AuthFlowTypeEnum getAuthFlowType() {
    return authFlowType;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_FLOW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthFlowType(AuthFlowTypeEnum authFlowType) {
    this.authFlowType = authFlowType;
  }


  public AdvancedAuth predicateKey(List<String> predicateKey) {
    this.predicateKey = predicateKey;
    return this;
  }

  public AdvancedAuth addPredicateKeyItem(String predicateKeyItem) {
    if (this.predicateKey == null) {
      this.predicateKey = new ArrayList<>();
    }
    this.predicateKey.add(predicateKeyItem);
    return this;
  }

   /**
   * Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.
   * @return predicateKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.")
  @JsonProperty(JSON_PROPERTY_PREDICATE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPredicateKey() {
    return predicateKey;
  }


  @JsonProperty(JSON_PROPERTY_PREDICATE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPredicateKey(List<String> predicateKey) {
    this.predicateKey = predicateKey;
  }


  public AdvancedAuth predicateValue(String predicateValue) {
    this.predicateValue = predicateValue;
    return this;
  }

   /**
   * Value of the predicate_key fields for the advanced auth to be applicable.
   * @return predicateValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value of the predicate_key fields for the advanced auth to be applicable.")
  @JsonProperty(JSON_PROPERTY_PREDICATE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPredicateValue() {
    return predicateValue;
  }


  @JsonProperty(JSON_PROPERTY_PREDICATE_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPredicateValue(String predicateValue) {
    this.predicateValue = predicateValue;
  }


  public AdvancedAuth oauthConfigSpecification(OAuthConfigSpecification oauthConfigSpecification) {
    this.oauthConfigSpecification = oauthConfigSpecification;
    return this;
  }

   /**
   * Get oauthConfigSpecification
   * @return oauthConfigSpecification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OAUTH_CONFIG_SPECIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OAuthConfigSpecification getOauthConfigSpecification() {
    return oauthConfigSpecification;
  }


  @JsonProperty(JSON_PROPERTY_OAUTH_CONFIG_SPECIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOauthConfigSpecification(OAuthConfigSpecification oauthConfigSpecification) {
    this.oauthConfigSpecification = oauthConfigSpecification;
  }


  /**
   * Return true if this AdvancedAuth object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedAuth advancedAuth = (AdvancedAuth) o;
    return Objects.equals(this.authFlowType, advancedAuth.authFlowType) &&
        Objects.equals(this.predicateKey, advancedAuth.predicateKey) &&
        Objects.equals(this.predicateValue, advancedAuth.predicateValue) &&
        Objects.equals(this.oauthConfigSpecification, advancedAuth.oauthConfigSpecification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authFlowType, predicateKey, predicateValue, oauthConfigSpecification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedAuth {\n");
    sb.append("    authFlowType: ").append(toIndentedString(authFlowType)).append("\n");
    sb.append("    predicateKey: ").append(toIndentedString(predicateKey)).append("\n");
    sb.append("    predicateValue: ").append(toIndentedString(predicateValue)).append("\n");
    sb.append("    oauthConfigSpecification: ").append(toIndentedString(oauthConfigSpecification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

