/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.AirbyteCatalog;
import io.airbyte.api.client.model.generated.CatalogDiff;
import io.airbyte.api.client.model.generated.ConnectionStatus;
import io.airbyte.api.client.model.generated.SynchronousJobRead;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Returns the results of a discover catalog job. If the job was not successful, the catalog field will not be present. jobInfo will aways be present and its status be used to determine if the job was successful or not.
 */
@ApiModel(description = "Returns the results of a discover catalog job. If the job was not successful, the catalog field will not be present. jobInfo will aways be present and its status be used to determine if the job was successful or not.")
@JsonPropertyOrder({
  SourceDiscoverSchemaRead.JSON_PROPERTY_CATALOG,
  SourceDiscoverSchemaRead.JSON_PROPERTY_JOB_INFO,
  SourceDiscoverSchemaRead.JSON_PROPERTY_CATALOG_ID,
  SourceDiscoverSchemaRead.JSON_PROPERTY_CATALOG_DIFF,
  SourceDiscoverSchemaRead.JSON_PROPERTY_BREAKING_CHANGE,
  SourceDiscoverSchemaRead.JSON_PROPERTY_CONNECTION_STATUS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class SourceDiscoverSchemaRead {
  public static final String JSON_PROPERTY_CATALOG = "catalog";
  private AirbyteCatalog catalog;

  public static final String JSON_PROPERTY_JOB_INFO = "jobInfo";
  private SynchronousJobRead jobInfo;

  public static final String JSON_PROPERTY_CATALOG_ID = "catalogId";
  private UUID catalogId;

  public static final String JSON_PROPERTY_CATALOG_DIFF = "catalogDiff";
  private CatalogDiff catalogDiff;

  public static final String JSON_PROPERTY_BREAKING_CHANGE = "breakingChange";
  private Boolean breakingChange;

  public static final String JSON_PROPERTY_CONNECTION_STATUS = "connectionStatus";
  private ConnectionStatus connectionStatus;

  public SourceDiscoverSchemaRead() { 
  }

  public SourceDiscoverSchemaRead catalog(AirbyteCatalog catalog) {
    this.catalog = catalog;
    return this;
  }

   /**
   * Get catalog
   * @return catalog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CATALOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AirbyteCatalog getCatalog() {
    return catalog;
  }


  @JsonProperty(JSON_PROPERTY_CATALOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalog(AirbyteCatalog catalog) {
    this.catalog = catalog;
  }


  public SourceDiscoverSchemaRead jobInfo(SynchronousJobRead jobInfo) {
    this.jobInfo = jobInfo;
    return this;
  }

   /**
   * Get jobInfo
   * @return jobInfo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_JOB_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SynchronousJobRead getJobInfo() {
    return jobInfo;
  }


  @JsonProperty(JSON_PROPERTY_JOB_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setJobInfo(SynchronousJobRead jobInfo) {
    this.jobInfo = jobInfo;
  }


  public SourceDiscoverSchemaRead catalogId(UUID catalogId) {
    this.catalogId = catalogId;
    return this;
  }

   /**
   * Get catalogId
   * @return catalogId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CATALOG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getCatalogId() {
    return catalogId;
  }


  @JsonProperty(JSON_PROPERTY_CATALOG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalogId(UUID catalogId) {
    this.catalogId = catalogId;
  }


  public SourceDiscoverSchemaRead catalogDiff(CatalogDiff catalogDiff) {
    this.catalogDiff = catalogDiff;
    return this;
  }

   /**
   * Get catalogDiff
   * @return catalogDiff
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CATALOG_DIFF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CatalogDiff getCatalogDiff() {
    return catalogDiff;
  }


  @JsonProperty(JSON_PROPERTY_CATALOG_DIFF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalogDiff(CatalogDiff catalogDiff) {
    this.catalogDiff = catalogDiff;
  }


  public SourceDiscoverSchemaRead breakingChange(Boolean breakingChange) {
    this.breakingChange = breakingChange;
    return this;
  }

   /**
   * Get breakingChange
   * @return breakingChange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_BREAKING_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBreakingChange() {
    return breakingChange;
  }


  @JsonProperty(JSON_PROPERTY_BREAKING_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBreakingChange(Boolean breakingChange) {
    this.breakingChange = breakingChange;
  }


  public SourceDiscoverSchemaRead connectionStatus(ConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

   /**
   * Get connectionStatus
   * @return connectionStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CONNECTION_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConnectionStatus getConnectionStatus() {
    return connectionStatus;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTION_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectionStatus(ConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  /**
   * Return true if this SourceDiscoverSchemaRead object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceDiscoverSchemaRead sourceDiscoverSchemaRead = (SourceDiscoverSchemaRead) o;
    return Objects.equals(this.catalog, sourceDiscoverSchemaRead.catalog) &&
        Objects.equals(this.jobInfo, sourceDiscoverSchemaRead.jobInfo) &&
        Objects.equals(this.catalogId, sourceDiscoverSchemaRead.catalogId) &&
        Objects.equals(this.catalogDiff, sourceDiscoverSchemaRead.catalogDiff) &&
        Objects.equals(this.breakingChange, sourceDiscoverSchemaRead.breakingChange) &&
        Objects.equals(this.connectionStatus, sourceDiscoverSchemaRead.connectionStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalog, jobInfo, catalogId, catalogDiff, breakingChange, connectionStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceDiscoverSchemaRead {\n");
    sb.append("    catalog: ").append(toIndentedString(catalog)).append("\n");
    sb.append("    jobInfo: ").append(toIndentedString(jobInfo)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    catalogDiff: ").append(toIndentedString(catalogDiff)).append("\n");
    sb.append("    breakingChange: ").append(toIndentedString(breakingChange)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

