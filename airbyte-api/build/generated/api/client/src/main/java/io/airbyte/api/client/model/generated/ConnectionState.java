/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.ConnectionStateType;
import io.airbyte.api.client.model.generated.GlobalState;
import io.airbyte.api.client.model.generated.StreamState;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Contains the state for a connection. The stateType field identifies what type of state it is. Only the field corresponding to that type will be set, the rest will be null. If stateType&#x3D;not_set, then none of the fields will be set.
 */
@ApiModel(description = "Contains the state for a connection. The stateType field identifies what type of state it is. Only the field corresponding to that type will be set, the rest will be null. If stateType=not_set, then none of the fields will be set.")
@JsonPropertyOrder({
  ConnectionState.JSON_PROPERTY_STATE_TYPE,
  ConnectionState.JSON_PROPERTY_CONNECTION_ID,
  ConnectionState.JSON_PROPERTY_STATE,
  ConnectionState.JSON_PROPERTY_STREAM_STATE,
  ConnectionState.JSON_PROPERTY_GLOBAL_STATE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class ConnectionState {
  public static final String JSON_PROPERTY_STATE_TYPE = "stateType";
  private ConnectionStateType stateType;

  public static final String JSON_PROPERTY_CONNECTION_ID = "connectionId";
  private UUID connectionId;

  public static final String JSON_PROPERTY_STATE = "state";
  private com.fasterxml.jackson.databind.JsonNode state;

  public static final String JSON_PROPERTY_STREAM_STATE = "streamState";
  private List<StreamState> streamState = null;

  public static final String JSON_PROPERTY_GLOBAL_STATE = "globalState";
  private GlobalState globalState;

  public ConnectionState() { 
  }

  public ConnectionState stateType(ConnectionStateType stateType) {
    this.stateType = stateType;
    return this;
  }

   /**
   * Get stateType
   * @return stateType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConnectionStateType getStateType() {
    return stateType;
  }


  @JsonProperty(JSON_PROPERTY_STATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStateType(ConnectionStateType stateType) {
    this.stateType = stateType;
  }


  public ConnectionState connectionId(UUID connectionId) {
    this.connectionId = connectionId;
    return this;
  }

   /**
   * Get connectionId
   * @return connectionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONNECTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getConnectionId() {
    return connectionId;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnectionId(UUID connectionId) {
    this.connectionId = connectionId;
  }


  public ConnectionState state(com.fasterxml.jackson.databind.JsonNode state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public com.fasterxml.jackson.databind.JsonNode getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(com.fasterxml.jackson.databind.JsonNode state) {
    this.state = state;
  }


  public ConnectionState streamState(List<StreamState> streamState) {
    this.streamState = streamState;
    return this;
  }

  public ConnectionState addStreamStateItem(StreamState streamStateItem) {
    if (this.streamState == null) {
      this.streamState = new ArrayList<>();
    }
    this.streamState.add(streamStateItem);
    return this;
  }

   /**
   * Get streamState
   * @return streamState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STREAM_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<StreamState> getStreamState() {
    return streamState;
  }


  @JsonProperty(JSON_PROPERTY_STREAM_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStreamState(List<StreamState> streamState) {
    this.streamState = streamState;
  }


  public ConnectionState globalState(GlobalState globalState) {
    this.globalState = globalState;
    return this;
  }

   /**
   * Get globalState
   * @return globalState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_GLOBAL_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GlobalState getGlobalState() {
    return globalState;
  }


  @JsonProperty(JSON_PROPERTY_GLOBAL_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGlobalState(GlobalState globalState) {
    this.globalState = globalState;
  }


  /**
   * Return true if this ConnectionState object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionState connectionState = (ConnectionState) o;
    return Objects.equals(this.stateType, connectionState.stateType) &&
        Objects.equals(this.connectionId, connectionState.connectionId) &&
        Objects.equals(this.state, connectionState.state) &&
        Objects.equals(this.streamState, connectionState.streamState) &&
        Objects.equals(this.globalState, connectionState.globalState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stateType, connectionId, state, streamState, globalState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionState {\n");
    sb.append("    stateType: ").append(toIndentedString(stateType)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    streamState: ").append(toIndentedString(streamState)).append("\n");
    sb.append("    globalState: ").append(toIndentedString(globalState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

