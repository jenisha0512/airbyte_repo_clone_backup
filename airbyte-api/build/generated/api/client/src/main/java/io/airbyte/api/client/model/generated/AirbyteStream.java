/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.SyncMode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * the immutable schema defined by the source
 */
@ApiModel(description = "the immutable schema defined by the source")
@JsonPropertyOrder({
  AirbyteStream.JSON_PROPERTY_NAME,
  AirbyteStream.JSON_PROPERTY_JSON_SCHEMA,
  AirbyteStream.JSON_PROPERTY_SUPPORTED_SYNC_MODES,
  AirbyteStream.JSON_PROPERTY_SOURCE_DEFINED_CURSOR,
  AirbyteStream.JSON_PROPERTY_DEFAULT_CURSOR_FIELD,
  AirbyteStream.JSON_PROPERTY_SOURCE_DEFINED_PRIMARY_KEY,
  AirbyteStream.JSON_PROPERTY_NAMESPACE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class AirbyteStream {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_JSON_SCHEMA = "jsonSchema";
  private com.fasterxml.jackson.databind.JsonNode jsonSchema;

  public static final String JSON_PROPERTY_SUPPORTED_SYNC_MODES = "supportedSyncModes";
  private List<SyncMode> supportedSyncModes = null;

  public static final String JSON_PROPERTY_SOURCE_DEFINED_CURSOR = "sourceDefinedCursor";
  private Boolean sourceDefinedCursor;

  public static final String JSON_PROPERTY_DEFAULT_CURSOR_FIELD = "defaultCursorField";
  private List<String> defaultCursorField = null;

  public static final String JSON_PROPERTY_SOURCE_DEFINED_PRIMARY_KEY = "sourceDefinedPrimaryKey";
  private List<List<String>> sourceDefinedPrimaryKey = null;

  public static final String JSON_PROPERTY_NAMESPACE = "namespace";
  private String namespace;

  public AirbyteStream() { 
  }

  public AirbyteStream name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Stream&#39;s name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Stream's name.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public AirbyteStream jsonSchema(com.fasterxml.jackson.databind.JsonNode jsonSchema) {
    this.jsonSchema = jsonSchema;
    return this;
  }

   /**
   * Get jsonSchema
   * @return jsonSchema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_JSON_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public com.fasterxml.jackson.databind.JsonNode getJsonSchema() {
    return jsonSchema;
  }


  @JsonProperty(JSON_PROPERTY_JSON_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJsonSchema(com.fasterxml.jackson.databind.JsonNode jsonSchema) {
    this.jsonSchema = jsonSchema;
  }


  public AirbyteStream supportedSyncModes(List<SyncMode> supportedSyncModes) {
    this.supportedSyncModes = supportedSyncModes;
    return this;
  }

  public AirbyteStream addSupportedSyncModesItem(SyncMode supportedSyncModesItem) {
    if (this.supportedSyncModes == null) {
      this.supportedSyncModes = new ArrayList<>();
    }
    this.supportedSyncModes.add(supportedSyncModesItem);
    return this;
  }

   /**
   * Get supportedSyncModes
   * @return supportedSyncModes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SUPPORTED_SYNC_MODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SyncMode> getSupportedSyncModes() {
    return supportedSyncModes;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_SYNC_MODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedSyncModes(List<SyncMode> supportedSyncModes) {
    this.supportedSyncModes = supportedSyncModes;
  }


  public AirbyteStream sourceDefinedCursor(Boolean sourceDefinedCursor) {
    this.sourceDefinedCursor = sourceDefinedCursor;
    return this;
  }

   /**
   * If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.
   * @return sourceDefinedCursor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.")
  @JsonProperty(JSON_PROPERTY_SOURCE_DEFINED_CURSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSourceDefinedCursor() {
    return sourceDefinedCursor;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_DEFINED_CURSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceDefinedCursor(Boolean sourceDefinedCursor) {
    this.sourceDefinedCursor = sourceDefinedCursor;
  }


  public AirbyteStream defaultCursorField(List<String> defaultCursorField) {
    this.defaultCursorField = defaultCursorField;
    return this;
  }

  public AirbyteStream addDefaultCursorFieldItem(String defaultCursorFieldItem) {
    if (this.defaultCursorField == null) {
      this.defaultCursorField = new ArrayList<>();
    }
    this.defaultCursorField.add(defaultCursorFieldItem);
    return this;
  }

   /**
   * Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.
   * @return defaultCursorField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.")
  @JsonProperty(JSON_PROPERTY_DEFAULT_CURSOR_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDefaultCursorField() {
    return defaultCursorField;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_CURSOR_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultCursorField(List<String> defaultCursorField) {
    this.defaultCursorField = defaultCursorField;
  }


  public AirbyteStream sourceDefinedPrimaryKey(List<List<String>> sourceDefinedPrimaryKey) {
    this.sourceDefinedPrimaryKey = sourceDefinedPrimaryKey;
    return this;
  }

  public AirbyteStream addSourceDefinedPrimaryKeyItem(List<String> sourceDefinedPrimaryKeyItem) {
    if (this.sourceDefinedPrimaryKey == null) {
      this.sourceDefinedPrimaryKey = new ArrayList<>();
    }
    this.sourceDefinedPrimaryKey.add(sourceDefinedPrimaryKeyItem);
    return this;
  }

   /**
   * If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.
   * @return sourceDefinedPrimaryKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.")
  @JsonProperty(JSON_PROPERTY_SOURCE_DEFINED_PRIMARY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<String>> getSourceDefinedPrimaryKey() {
    return sourceDefinedPrimaryKey;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_DEFINED_PRIMARY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceDefinedPrimaryKey(List<List<String>> sourceDefinedPrimaryKey) {
    this.sourceDefinedPrimaryKey = sourceDefinedPrimaryKey;
  }


  public AirbyteStream namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Optional Source-defined namespace. Airbyte streams from the same sources should have the same namespace. Currently only used by JDBC destinations to determine what schema to write to.
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional Source-defined namespace. Airbyte streams from the same sources should have the same namespace. Currently only used by JDBC destinations to determine what schema to write to.")
  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  /**
   * Return true if this AirbyteStream object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirbyteStream airbyteStream = (AirbyteStream) o;
    return Objects.equals(this.name, airbyteStream.name) &&
        Objects.equals(this.jsonSchema, airbyteStream.jsonSchema) &&
        Objects.equals(this.supportedSyncModes, airbyteStream.supportedSyncModes) &&
        Objects.equals(this.sourceDefinedCursor, airbyteStream.sourceDefinedCursor) &&
        Objects.equals(this.defaultCursorField, airbyteStream.defaultCursorField) &&
        Objects.equals(this.sourceDefinedPrimaryKey, airbyteStream.sourceDefinedPrimaryKey) &&
        Objects.equals(this.namespace, airbyteStream.namespace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, jsonSchema, supportedSyncModes, sourceDefinedCursor, defaultCursorField, sourceDefinedPrimaryKey, namespace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirbyteStream {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    jsonSchema: ").append(toIndentedString(jsonSchema)).append("\n");
    sb.append("    supportedSyncModes: ").append(toIndentedString(supportedSyncModes)).append("\n");
    sb.append("    sourceDefinedCursor: ").append(toIndentedString(sourceDefinedCursor)).append("\n");
    sb.append("    defaultCursorField: ").append(toIndentedString(defaultCursorField)).append("\n");
    sb.append("    sourceDefinedPrimaryKey: ").append(toIndentedString(sourceDefinedPrimaryKey)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

