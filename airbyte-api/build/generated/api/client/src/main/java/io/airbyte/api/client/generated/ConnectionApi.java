/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.airbyte.api.client.generated;

import io.airbyte.api.client.invoker.generated.ApiClient;
import io.airbyte.api.client.invoker.generated.ApiException;
import io.airbyte.api.client.invoker.generated.ApiResponse;
import io.airbyte.api.client.invoker.generated.Pair;

import io.airbyte.api.client.model.generated.ConnectionCreate;
import io.airbyte.api.client.model.generated.ConnectionIdRequestBody;
import io.airbyte.api.client.model.generated.ConnectionRead;
import io.airbyte.api.client.model.generated.ConnectionReadList;
import io.airbyte.api.client.model.generated.ConnectionSearch;
import io.airbyte.api.client.model.generated.ConnectionUpdate;
import io.airbyte.api.client.model.generated.InvalidInputExceptionInfo;
import io.airbyte.api.client.model.generated.JobInfoRead;
import io.airbyte.api.client.model.generated.NotFoundKnownExceptionInfo;
import io.airbyte.api.client.model.generated.WorkspaceIdRequestBody;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class ConnectionApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ConnectionApi() {
    this(new ApiClient());
  }

  public ConnectionApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a connection between a source and a destination
   * 
   * @param connectionCreate  (required)
   * @return ConnectionRead
   * @throws ApiException if fails to make API call
   */
  public ConnectionRead createConnection(ConnectionCreate connectionCreate) throws ApiException {
    ApiResponse<ConnectionRead> localVarResponse = createConnectionWithHttpInfo(connectionCreate);
    return localVarResponse.getData();
  }

  /**
   * Create a connection between a source and a destination
   * 
   * @param connectionCreate  (required)
   * @return ApiResponse&lt;ConnectionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectionRead> createConnectionWithHttpInfo(ConnectionCreate connectionCreate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createConnectionRequestBuilder(connectionCreate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createConnection", localVarResponse);
        }
        return new ApiResponse<ConnectionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createConnectionRequestBuilder(ConnectionCreate connectionCreate) throws ApiException {
    // verify the required parameter 'connectionCreate' is set
    if (connectionCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionCreate' when calling createConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/connections/create";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(connectionCreate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a connection
   * 
   * @param connectionIdRequestBody  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteConnection(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    deleteConnectionWithHttpInfo(connectionIdRequestBody);
  }

  /**
   * Delete a connection
   * 
   * @param connectionIdRequestBody  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteConnectionWithHttpInfo(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteConnectionRequestBuilder(connectionIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteConnection", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteConnectionRequestBuilder(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    // verify the required parameter 'connectionIdRequestBody' is set
    if (connectionIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionIdRequestBody' when calling deleteConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/connections/delete";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(connectionIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a connection
   * 
   * @param connectionIdRequestBody  (required)
   * @return ConnectionRead
   * @throws ApiException if fails to make API call
   */
  public ConnectionRead getConnection(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    ApiResponse<ConnectionRead> localVarResponse = getConnectionWithHttpInfo(connectionIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Get a connection
   * 
   * @param connectionIdRequestBody  (required)
   * @return ApiResponse&lt;ConnectionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectionRead> getConnectionWithHttpInfo(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getConnectionRequestBuilder(connectionIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getConnection", localVarResponse);
        }
        return new ApiResponse<ConnectionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getConnectionRequestBuilder(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    // verify the required parameter 'connectionIdRequestBody' is set
    if (connectionIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionIdRequestBody' when calling getConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/connections/get";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(connectionIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns all connections for a workspace, including deleted connections.
   * List connections for workspace, including deleted connections.
   * @param workspaceIdRequestBody  (required)
   * @return ConnectionReadList
   * @throws ApiException if fails to make API call
   */
  public ConnectionReadList listAllConnectionsForWorkspace(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    ApiResponse<ConnectionReadList> localVarResponse = listAllConnectionsForWorkspaceWithHttpInfo(workspaceIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Returns all connections for a workspace, including deleted connections.
   * List connections for workspace, including deleted connections.
   * @param workspaceIdRequestBody  (required)
   * @return ApiResponse&lt;ConnectionReadList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectionReadList> listAllConnectionsForWorkspaceWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAllConnectionsForWorkspaceRequestBuilder(workspaceIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAllConnectionsForWorkspace", localVarResponse);
        }
        return new ApiResponse<ConnectionReadList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectionReadList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAllConnectionsForWorkspaceRequestBuilder(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    // verify the required parameter 'workspaceIdRequestBody' is set
    if (workspaceIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceIdRequestBody' when calling listAllConnectionsForWorkspace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/connections/list_all";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(workspaceIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns all connections for a workspace.
   * List connections for workspace. Does not return deleted connections.
   * @param workspaceIdRequestBody  (required)
   * @return ConnectionReadList
   * @throws ApiException if fails to make API call
   */
  public ConnectionReadList listConnectionsForWorkspace(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    ApiResponse<ConnectionReadList> localVarResponse = listConnectionsForWorkspaceWithHttpInfo(workspaceIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Returns all connections for a workspace.
   * List connections for workspace. Does not return deleted connections.
   * @param workspaceIdRequestBody  (required)
   * @return ApiResponse&lt;ConnectionReadList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectionReadList> listConnectionsForWorkspaceWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listConnectionsForWorkspaceRequestBuilder(workspaceIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listConnectionsForWorkspace", localVarResponse);
        }
        return new ApiResponse<ConnectionReadList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectionReadList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listConnectionsForWorkspaceRequestBuilder(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    // verify the required parameter 'workspaceIdRequestBody' is set
    if (workspaceIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceIdRequestBody' when calling listConnectionsForWorkspace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/connections/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(workspaceIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
   * 
   * @param connectionIdRequestBody  (required)
   * @return JobInfoRead
   * @throws ApiException if fails to make API call
   */
  public JobInfoRead resetConnection(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    ApiResponse<JobInfoRead> localVarResponse = resetConnectionWithHttpInfo(connectionIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
   * 
   * @param connectionIdRequestBody  (required)
   * @return ApiResponse&lt;JobInfoRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<JobInfoRead> resetConnectionWithHttpInfo(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetConnectionRequestBuilder(connectionIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetConnection", localVarResponse);
        }
        return new ApiResponse<JobInfoRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<JobInfoRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetConnectionRequestBuilder(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    // verify the required parameter 'connectionIdRequestBody' is set
    if (connectionIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionIdRequestBody' when calling resetConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/connections/reset";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(connectionIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Search connections
   * 
   * @param connectionSearch  (required)
   * @return ConnectionReadList
   * @throws ApiException if fails to make API call
   */
  public ConnectionReadList searchConnections(ConnectionSearch connectionSearch) throws ApiException {
    ApiResponse<ConnectionReadList> localVarResponse = searchConnectionsWithHttpInfo(connectionSearch);
    return localVarResponse.getData();
  }

  /**
   * Search connections
   * 
   * @param connectionSearch  (required)
   * @return ApiResponse&lt;ConnectionReadList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectionReadList> searchConnectionsWithHttpInfo(ConnectionSearch connectionSearch) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchConnectionsRequestBuilder(connectionSearch);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchConnections", localVarResponse);
        }
        return new ApiResponse<ConnectionReadList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectionReadList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchConnectionsRequestBuilder(ConnectionSearch connectionSearch) throws ApiException {
    // verify the required parameter 'connectionSearch' is set
    if (connectionSearch == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionSearch' when calling searchConnections");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/connections/search";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(connectionSearch);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Trigger a manual sync of the connection
   * 
   * @param connectionIdRequestBody  (required)
   * @return JobInfoRead
   * @throws ApiException if fails to make API call
   */
  public JobInfoRead syncConnection(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    ApiResponse<JobInfoRead> localVarResponse = syncConnectionWithHttpInfo(connectionIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Trigger a manual sync of the connection
   * 
   * @param connectionIdRequestBody  (required)
   * @return ApiResponse&lt;JobInfoRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<JobInfoRead> syncConnectionWithHttpInfo(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = syncConnectionRequestBuilder(connectionIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("syncConnection", localVarResponse);
        }
        return new ApiResponse<JobInfoRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<JobInfoRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder syncConnectionRequestBuilder(ConnectionIdRequestBody connectionIdRequestBody) throws ApiException {
    // verify the required parameter 'connectionIdRequestBody' is set
    if (connectionIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionIdRequestBody' when calling syncConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/connections/sync";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(connectionIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a connection
   * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection&#39;s entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
   * @param connectionUpdate  (required)
   * @return ConnectionRead
   * @throws ApiException if fails to make API call
   */
  public ConnectionRead updateConnection(ConnectionUpdate connectionUpdate) throws ApiException {
    ApiResponse<ConnectionRead> localVarResponse = updateConnectionWithHttpInfo(connectionUpdate);
    return localVarResponse.getData();
  }

  /**
   * Update a connection
   * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection&#39;s entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
   * @param connectionUpdate  (required)
   * @return ApiResponse&lt;ConnectionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectionRead> updateConnectionWithHttpInfo(ConnectionUpdate connectionUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateConnectionRequestBuilder(connectionUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateConnection", localVarResponse);
        }
        return new ApiResponse<ConnectionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateConnectionRequestBuilder(ConnectionUpdate connectionUpdate) throws ApiException {
    // verify the required parameter 'connectionUpdate' is set
    if (connectionUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'connectionUpdate' when calling updateConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/connections/update";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(connectionUpdate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
