/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * An object containing any metadata needed to describe this connector&#39;s Oauth flow
 */
@ApiModel(description = "An object containing any metadata needed to describe this connector's Oauth flow")
@JsonPropertyOrder({
  OAuth2Specification.JSON_PROPERTY_ROOT_OBJECT,
  OAuth2Specification.JSON_PROPERTY_OAUTH_FLOW_INIT_PARAMETERS,
  OAuth2Specification.JSON_PROPERTY_OAUTH_FLOW_OUTPUT_PARAMETERS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class OAuth2Specification {
  public static final String JSON_PROPERTY_ROOT_OBJECT = "rootObject";
  private List<Object> rootObject = new ArrayList<>();

  public static final String JSON_PROPERTY_OAUTH_FLOW_INIT_PARAMETERS = "oauthFlowInitParameters";
  private List<List<String>> oauthFlowInitParameters = new ArrayList<>();

  public static final String JSON_PROPERTY_OAUTH_FLOW_OUTPUT_PARAMETERS = "oauthFlowOutputParameters";
  private List<List<String>> oauthFlowOutputParameters = new ArrayList<>();

  public OAuth2Specification() { 
  }

  public OAuth2Specification rootObject(List<Object> rootObject) {
    this.rootObject = rootObject;
    return this;
  }

  public OAuth2Specification addRootObjectItem(Object rootObjectItem) {
    this.rootObject.add(rootObjectItem);
    return this;
  }

   /**
   * A list of strings representing a pointer to the root object which contains any oauth parameters in the ConnectorSpecification. Examples: if oauth parameters were contained inside the top level, rootObject&#x3D;[] If they were nested inside another object {&#39;credentials&#39;: {&#39;app_id&#39; etc...}, rootObject&#x3D;[&#39;credentials&#39;] If they were inside a oneOf {&#39;switch&#39;: {oneOf: [{client_id...}, {non_oauth_param]}},  rootObject&#x3D;[&#39;switch&#39;, 0] 
   * @return rootObject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"path\",1]", required = true, value = "A list of strings representing a pointer to the root object which contains any oauth parameters in the ConnectorSpecification. Examples: if oauth parameters were contained inside the top level, rootObject=[] If they were nested inside another object {'credentials': {'app_id' etc...}, rootObject=['credentials'] If they were inside a oneOf {'switch': {oneOf: [{client_id...}, {non_oauth_param]}},  rootObject=['switch', 0] ")
  @JsonProperty(JSON_PROPERTY_ROOT_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Object> getRootObject() {
    return rootObject;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRootObject(List<Object> rootObject) {
    this.rootObject = rootObject;
  }


  public OAuth2Specification oauthFlowInitParameters(List<List<String>> oauthFlowInitParameters) {
    this.oauthFlowInitParameters = oauthFlowInitParameters;
    return this;
  }

  public OAuth2Specification addOauthFlowInitParametersItem(List<String> oauthFlowInitParametersItem) {
    this.oauthFlowInitParameters.add(oauthFlowInitParametersItem);
    return this;
  }

   /**
   * Pointers to the fields in the rootObject needed to obtain the initial refresh/access tokens for the OAuth flow. Each inner array represents the path in the rootObject of the referenced field. For example. Assume the rootObject contains params &#39;app_secret&#39;, &#39;app_id&#39; which are needed to get the initial refresh token. If they are not nested in the rootObject, then the array would look like this [[&#39;app_secret&#39;], [&#39;app_id&#39;]] If they are nested inside an object called &#39;auth_params&#39; then this array would be [[&#39;auth_params&#39;, &#39;app_secret&#39;], [&#39;auth_params&#39;, &#39;app_id&#39;]]
   * @return oauthFlowInitParameters
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Pointers to the fields in the rootObject needed to obtain the initial refresh/access tokens for the OAuth flow. Each inner array represents the path in the rootObject of the referenced field. For example. Assume the rootObject contains params 'app_secret', 'app_id' which are needed to get the initial refresh token. If they are not nested in the rootObject, then the array would look like this [['app_secret'], ['app_id']] If they are nested inside an object called 'auth_params' then this array would be [['auth_params', 'app_secret'], ['auth_params', 'app_id']]")
  @JsonProperty(JSON_PROPERTY_OAUTH_FLOW_INIT_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<List<String>> getOauthFlowInitParameters() {
    return oauthFlowInitParameters;
  }


  @JsonProperty(JSON_PROPERTY_OAUTH_FLOW_INIT_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOauthFlowInitParameters(List<List<String>> oauthFlowInitParameters) {
    this.oauthFlowInitParameters = oauthFlowInitParameters;
  }


  public OAuth2Specification oauthFlowOutputParameters(List<List<String>> oauthFlowOutputParameters) {
    this.oauthFlowOutputParameters = oauthFlowOutputParameters;
    return this;
  }

  public OAuth2Specification addOauthFlowOutputParametersItem(List<String> oauthFlowOutputParametersItem) {
    this.oauthFlowOutputParameters.add(oauthFlowOutputParametersItem);
    return this;
  }

   /**
   * Pointers to the fields in the rootObject which can be populated from successfully completing the oauth flow using the init parameters. This is typically a refresh/access token. Each inner array represents the path in the rootObject of the referenced field.
   * @return oauthFlowOutputParameters
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Pointers to the fields in the rootObject which can be populated from successfully completing the oauth flow using the init parameters. This is typically a refresh/access token. Each inner array represents the path in the rootObject of the referenced field.")
  @JsonProperty(JSON_PROPERTY_OAUTH_FLOW_OUTPUT_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<List<String>> getOauthFlowOutputParameters() {
    return oauthFlowOutputParameters;
  }


  @JsonProperty(JSON_PROPERTY_OAUTH_FLOW_OUTPUT_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOauthFlowOutputParameters(List<List<String>> oauthFlowOutputParameters) {
    this.oauthFlowOutputParameters = oauthFlowOutputParameters;
  }


  /**
   * Return true if this OAuth2Specification object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2Specification oauth2Specification = (OAuth2Specification) o;
    return Objects.equals(this.rootObject, oauth2Specification.rootObject) &&
        Objects.equals(this.oauthFlowInitParameters, oauth2Specification.oauthFlowInitParameters) &&
        Objects.equals(this.oauthFlowOutputParameters, oauth2Specification.oauthFlowOutputParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rootObject, oauthFlowInitParameters, oauthFlowOutputParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2Specification {\n");
    sb.append("    rootObject: ").append(toIndentedString(rootObject)).append("\n");
    sb.append("    oauthFlowInitParameters: ").append(toIndentedString(oauthFlowInitParameters)).append("\n");
    sb.append("    oauthFlowOutputParameters: ").append(toIndentedString(oauthFlowOutputParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

