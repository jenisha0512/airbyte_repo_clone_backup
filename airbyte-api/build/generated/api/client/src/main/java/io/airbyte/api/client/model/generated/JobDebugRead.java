/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.DestinationDefinitionRead;
import io.airbyte.api.client.model.generated.JobConfigType;
import io.airbyte.api.client.model.generated.JobStatus;
import io.airbyte.api.client.model.generated.SourceDefinitionRead;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * JobDebugRead
 */
@JsonPropertyOrder({
  JobDebugRead.JSON_PROPERTY_ID,
  JobDebugRead.JSON_PROPERTY_CONFIG_TYPE,
  JobDebugRead.JSON_PROPERTY_CONFIG_ID,
  JobDebugRead.JSON_PROPERTY_STATUS,
  JobDebugRead.JSON_PROPERTY_AIRBYTE_VERSION,
  JobDebugRead.JSON_PROPERTY_SOURCE_DEFINITION,
  JobDebugRead.JSON_PROPERTY_DESTINATION_DEFINITION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class JobDebugRead {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_CONFIG_TYPE = "configType";
  private JobConfigType configType;

  public static final String JSON_PROPERTY_CONFIG_ID = "configId";
  private String configId;

  public static final String JSON_PROPERTY_STATUS = "status";
  private JobStatus status;

  public static final String JSON_PROPERTY_AIRBYTE_VERSION = "airbyteVersion";
  private String airbyteVersion;

  public static final String JSON_PROPERTY_SOURCE_DEFINITION = "sourceDefinition";
  private SourceDefinitionRead sourceDefinition;

  public static final String JSON_PROPERTY_DESTINATION_DEFINITION = "destinationDefinition";
  private DestinationDefinitionRead destinationDefinition;

  public JobDebugRead() { 
  }

  public JobDebugRead id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public JobDebugRead configType(JobConfigType configType) {
    this.configType = configType;
    return this;
  }

   /**
   * Get configType
   * @return configType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONFIG_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public JobConfigType getConfigType() {
    return configType;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigType(JobConfigType configType) {
    this.configType = configType;
  }


  public JobDebugRead configId(String configId) {
    this.configId = configId;
    return this;
  }

   /**
   * Get configId
   * @return configId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConfigId() {
    return configId;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigId(String configId) {
    this.configId = configId;
  }


  public JobDebugRead status(JobStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public JobStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(JobStatus status) {
    this.status = status;
  }


  public JobDebugRead airbyteVersion(String airbyteVersion) {
    this.airbyteVersion = airbyteVersion;
    return this;
  }

   /**
   * Get airbyteVersion
   * @return airbyteVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_AIRBYTE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAirbyteVersion() {
    return airbyteVersion;
  }


  @JsonProperty(JSON_PROPERTY_AIRBYTE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAirbyteVersion(String airbyteVersion) {
    this.airbyteVersion = airbyteVersion;
  }


  public JobDebugRead sourceDefinition(SourceDefinitionRead sourceDefinition) {
    this.sourceDefinition = sourceDefinition;
    return this;
  }

   /**
   * Get sourceDefinition
   * @return sourceDefinition
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SOURCE_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SourceDefinitionRead getSourceDefinition() {
    return sourceDefinition;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSourceDefinition(SourceDefinitionRead sourceDefinition) {
    this.sourceDefinition = sourceDefinition;
  }


  public JobDebugRead destinationDefinition(DestinationDefinitionRead destinationDefinition) {
    this.destinationDefinition = destinationDefinition;
    return this;
  }

   /**
   * Get destinationDefinition
   * @return destinationDefinition
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DESTINATION_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DestinationDefinitionRead getDestinationDefinition() {
    return destinationDefinition;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDestinationDefinition(DestinationDefinitionRead destinationDefinition) {
    this.destinationDefinition = destinationDefinition;
  }


  /**
   * Return true if this JobDebugRead object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobDebugRead jobDebugRead = (JobDebugRead) o;
    return Objects.equals(this.id, jobDebugRead.id) &&
        Objects.equals(this.configType, jobDebugRead.configType) &&
        Objects.equals(this.configId, jobDebugRead.configId) &&
        Objects.equals(this.status, jobDebugRead.status) &&
        Objects.equals(this.airbyteVersion, jobDebugRead.airbyteVersion) &&
        Objects.equals(this.sourceDefinition, jobDebugRead.sourceDefinition) &&
        Objects.equals(this.destinationDefinition, jobDebugRead.destinationDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, configType, configId, status, airbyteVersion, sourceDefinition, destinationDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobDebugRead {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    airbyteVersion: ").append(toIndentedString(airbyteVersion)).append("\n");
    sb.append("    sourceDefinition: ").append(toIndentedString(sourceDefinition)).append("\n");
    sb.append("    destinationDefinition: ").append(toIndentedString(destinationDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

