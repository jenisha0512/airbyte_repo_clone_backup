/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.ActorDefinitionResourceRequirements;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * DestinationDefinitionCreate
 */
@JsonPropertyOrder({
  DestinationDefinitionCreate.JSON_PROPERTY_NAME,
  DestinationDefinitionCreate.JSON_PROPERTY_DOCKER_REPOSITORY,
  DestinationDefinitionCreate.JSON_PROPERTY_DOCKER_IMAGE_TAG,
  DestinationDefinitionCreate.JSON_PROPERTY_DOCUMENTATION_URL,
  DestinationDefinitionCreate.JSON_PROPERTY_ICON,
  DestinationDefinitionCreate.JSON_PROPERTY_RESOURCE_REQUIREMENTS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class DestinationDefinitionCreate {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DOCKER_REPOSITORY = "dockerRepository";
  private String dockerRepository;

  public static final String JSON_PROPERTY_DOCKER_IMAGE_TAG = "dockerImageTag";
  private String dockerImageTag;

  public static final String JSON_PROPERTY_DOCUMENTATION_URL = "documentationUrl";
  private URI documentationUrl;

  public static final String JSON_PROPERTY_ICON = "icon";
  private String icon;

  public static final String JSON_PROPERTY_RESOURCE_REQUIREMENTS = "resourceRequirements";
  private ActorDefinitionResourceRequirements resourceRequirements;

  public DestinationDefinitionCreate() { 
  }

  public DestinationDefinitionCreate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public DestinationDefinitionCreate dockerRepository(String dockerRepository) {
    this.dockerRepository = dockerRepository;
    return this;
  }

   /**
   * Get dockerRepository
   * @return dockerRepository
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DOCKER_REPOSITORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDockerRepository() {
    return dockerRepository;
  }


  @JsonProperty(JSON_PROPERTY_DOCKER_REPOSITORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDockerRepository(String dockerRepository) {
    this.dockerRepository = dockerRepository;
  }


  public DestinationDefinitionCreate dockerImageTag(String dockerImageTag) {
    this.dockerImageTag = dockerImageTag;
    return this;
  }

   /**
   * Get dockerImageTag
   * @return dockerImageTag
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DOCKER_IMAGE_TAG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDockerImageTag() {
    return dockerImageTag;
  }


  @JsonProperty(JSON_PROPERTY_DOCKER_IMAGE_TAG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDockerImageTag(String dockerImageTag) {
    this.dockerImageTag = dockerImageTag;
  }


  public DestinationDefinitionCreate documentationUrl(URI documentationUrl) {
    this.documentationUrl = documentationUrl;
    return this;
  }

   /**
   * Get documentationUrl
   * @return documentationUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DOCUMENTATION_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getDocumentationUrl() {
    return documentationUrl;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENTATION_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentationUrl(URI documentationUrl) {
    this.documentationUrl = documentationUrl;
  }


  public DestinationDefinitionCreate icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIcon() {
    return icon;
  }


  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIcon(String icon) {
    this.icon = icon;
  }


  public DestinationDefinitionCreate resourceRequirements(ActorDefinitionResourceRequirements resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
    return this;
  }

   /**
   * Get resourceRequirements
   * @return resourceRequirements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RESOURCE_REQUIREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ActorDefinitionResourceRequirements getResourceRequirements() {
    return resourceRequirements;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_REQUIREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceRequirements(ActorDefinitionResourceRequirements resourceRequirements) {
    this.resourceRequirements = resourceRequirements;
  }


  /**
   * Return true if this DestinationDefinitionCreate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationDefinitionCreate destinationDefinitionCreate = (DestinationDefinitionCreate) o;
    return Objects.equals(this.name, destinationDefinitionCreate.name) &&
        Objects.equals(this.dockerRepository, destinationDefinitionCreate.dockerRepository) &&
        Objects.equals(this.dockerImageTag, destinationDefinitionCreate.dockerImageTag) &&
        Objects.equals(this.documentationUrl, destinationDefinitionCreate.documentationUrl) &&
        Objects.equals(this.icon, destinationDefinitionCreate.icon) &&
        Objects.equals(this.resourceRequirements, destinationDefinitionCreate.resourceRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, dockerRepository, dockerImageTag, documentationUrl, icon, resourceRequirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationDefinitionCreate {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dockerRepository: ").append(toIndentedString(dockerRepository)).append("\n");
    sb.append("    dockerImageTag: ").append(toIndentedString(dockerImageTag)).append("\n");
    sb.append("    documentationUrl: ").append(toIndentedString(documentationUrl)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    resourceRequirements: ").append(toIndentedString(resourceRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

