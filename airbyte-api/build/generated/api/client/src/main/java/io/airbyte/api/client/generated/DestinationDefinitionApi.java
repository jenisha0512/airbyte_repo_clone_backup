/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.airbyte.api.client.generated;

import io.airbyte.api.client.invoker.generated.ApiClient;
import io.airbyte.api.client.invoker.generated.ApiException;
import io.airbyte.api.client.invoker.generated.ApiResponse;
import io.airbyte.api.client.invoker.generated.Pair;

import io.airbyte.api.client.model.generated.CustomDestinationDefinitionCreate;
import io.airbyte.api.client.model.generated.DestinationDefinitionIdRequestBody;
import io.airbyte.api.client.model.generated.DestinationDefinitionIdWithWorkspaceId;
import io.airbyte.api.client.model.generated.DestinationDefinitionRead;
import io.airbyte.api.client.model.generated.DestinationDefinitionReadList;
import io.airbyte.api.client.model.generated.DestinationDefinitionUpdate;
import io.airbyte.api.client.model.generated.InvalidInputExceptionInfo;
import io.airbyte.api.client.model.generated.NotFoundKnownExceptionInfo;
import io.airbyte.api.client.model.generated.PrivateDestinationDefinitionRead;
import io.airbyte.api.client.model.generated.PrivateDestinationDefinitionReadList;
import io.airbyte.api.client.model.generated.WorkspaceIdRequestBody;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class DestinationDefinitionApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DestinationDefinitionApi() {
    this(new ApiClient());
  }

  public DestinationDefinitionApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a custom destinationDefinition for the given workspace
   * 
   * @param customDestinationDefinitionCreate  (optional)
   * @return DestinationDefinitionRead
   * @throws ApiException if fails to make API call
   */
  public DestinationDefinitionRead createCustomDestinationDefinition(CustomDestinationDefinitionCreate customDestinationDefinitionCreate) throws ApiException {
    ApiResponse<DestinationDefinitionRead> localVarResponse = createCustomDestinationDefinitionWithHttpInfo(customDestinationDefinitionCreate);
    return localVarResponse.getData();
  }

  /**
   * Creates a custom destinationDefinition for the given workspace
   * 
   * @param customDestinationDefinitionCreate  (optional)
   * @return ApiResponse&lt;DestinationDefinitionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DestinationDefinitionRead> createCustomDestinationDefinitionWithHttpInfo(CustomDestinationDefinitionCreate customDestinationDefinitionCreate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createCustomDestinationDefinitionRequestBuilder(customDestinationDefinitionCreate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createCustomDestinationDefinition", localVarResponse);
        }
        return new ApiResponse<DestinationDefinitionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DestinationDefinitionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createCustomDestinationDefinitionRequestBuilder(CustomDestinationDefinitionCreate customDestinationDefinitionCreate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/create_custom";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customDestinationDefinitionCreate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a destination definition
   * 
   * @param destinationDefinitionIdRequestBody  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDestinationDefinition(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody) throws ApiException {
    deleteDestinationDefinitionWithHttpInfo(destinationDefinitionIdRequestBody);
  }

  /**
   * Delete a destination definition
   * 
   * @param destinationDefinitionIdRequestBody  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteDestinationDefinitionWithHttpInfo(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDestinationDefinitionRequestBuilder(destinationDefinitionIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDestinationDefinition", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDestinationDefinitionRequestBuilder(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody) throws ApiException {
    // verify the required parameter 'destinationDefinitionIdRequestBody' is set
    if (destinationDefinitionIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'destinationDefinitionIdRequestBody' when calling deleteDestinationDefinition");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/delete";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(destinationDefinitionIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get destinationDefinition
   * 
   * @param destinationDefinitionIdRequestBody  (required)
   * @return DestinationDefinitionRead
   * @throws ApiException if fails to make API call
   */
  public DestinationDefinitionRead getDestinationDefinition(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody) throws ApiException {
    ApiResponse<DestinationDefinitionRead> localVarResponse = getDestinationDefinitionWithHttpInfo(destinationDefinitionIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Get destinationDefinition
   * 
   * @param destinationDefinitionIdRequestBody  (required)
   * @return ApiResponse&lt;DestinationDefinitionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DestinationDefinitionRead> getDestinationDefinitionWithHttpInfo(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDestinationDefinitionRequestBuilder(destinationDefinitionIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDestinationDefinition", localVarResponse);
        }
        return new ApiResponse<DestinationDefinitionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DestinationDefinitionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDestinationDefinitionRequestBuilder(DestinationDefinitionIdRequestBody destinationDefinitionIdRequestBody) throws ApiException {
    // verify the required parameter 'destinationDefinitionIdRequestBody' is set
    if (destinationDefinitionIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'destinationDefinitionIdRequestBody' when calling getDestinationDefinition");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/get";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(destinationDefinitionIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a destinationDefinition that is configured for the given workspace
   * 
   * @param destinationDefinitionIdWithWorkspaceId  (required)
   * @return DestinationDefinitionRead
   * @throws ApiException if fails to make API call
   */
  public DestinationDefinitionRead getDestinationDefinitionForWorkspace(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
    ApiResponse<DestinationDefinitionRead> localVarResponse = getDestinationDefinitionForWorkspaceWithHttpInfo(destinationDefinitionIdWithWorkspaceId);
    return localVarResponse.getData();
  }

  /**
   * Get a destinationDefinition that is configured for the given workspace
   * 
   * @param destinationDefinitionIdWithWorkspaceId  (required)
   * @return ApiResponse&lt;DestinationDefinitionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DestinationDefinitionRead> getDestinationDefinitionForWorkspaceWithHttpInfo(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDestinationDefinitionForWorkspaceRequestBuilder(destinationDefinitionIdWithWorkspaceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDestinationDefinitionForWorkspace", localVarResponse);
        }
        return new ApiResponse<DestinationDefinitionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DestinationDefinitionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDestinationDefinitionForWorkspaceRequestBuilder(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
    // verify the required parameter 'destinationDefinitionIdWithWorkspaceId' is set
    if (destinationDefinitionIdWithWorkspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'destinationDefinitionIdWithWorkspaceId' when calling getDestinationDefinitionForWorkspace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/get_for_workspace";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(destinationDefinitionIdWithWorkspaceId);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * grant a private, non-custom destinationDefinition to a given workspace
   * 
   * @param destinationDefinitionIdWithWorkspaceId  (required)
   * @return PrivateDestinationDefinitionRead
   * @throws ApiException if fails to make API call
   */
  public PrivateDestinationDefinitionRead grantDestinationDefinitionToWorkspace(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
    ApiResponse<PrivateDestinationDefinitionRead> localVarResponse = grantDestinationDefinitionToWorkspaceWithHttpInfo(destinationDefinitionIdWithWorkspaceId);
    return localVarResponse.getData();
  }

  /**
   * grant a private, non-custom destinationDefinition to a given workspace
   * 
   * @param destinationDefinitionIdWithWorkspaceId  (required)
   * @return ApiResponse&lt;PrivateDestinationDefinitionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PrivateDestinationDefinitionRead> grantDestinationDefinitionToWorkspaceWithHttpInfo(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantDestinationDefinitionToWorkspaceRequestBuilder(destinationDefinitionIdWithWorkspaceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("grantDestinationDefinitionToWorkspace", localVarResponse);
        }
        return new ApiResponse<PrivateDestinationDefinitionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PrivateDestinationDefinitionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantDestinationDefinitionToWorkspaceRequestBuilder(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
    // verify the required parameter 'destinationDefinitionIdWithWorkspaceId' is set
    if (destinationDefinitionIdWithWorkspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'destinationDefinitionIdWithWorkspaceId' when calling grantDestinationDefinitionToWorkspace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/grant_definition";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(destinationDefinitionIdWithWorkspaceId);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List all the destinationDefinitions the current Airbyte deployment is configured to use
   * 
   * @return DestinationDefinitionReadList
   * @throws ApiException if fails to make API call
   */
  public DestinationDefinitionReadList listDestinationDefinitions() throws ApiException {
    ApiResponse<DestinationDefinitionReadList> localVarResponse = listDestinationDefinitionsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List all the destinationDefinitions the current Airbyte deployment is configured to use
   * 
   * @return ApiResponse&lt;DestinationDefinitionReadList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DestinationDefinitionReadList> listDestinationDefinitionsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDestinationDefinitionsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDestinationDefinitions", localVarResponse);
        }
        return new ApiResponse<DestinationDefinitionReadList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DestinationDefinitionReadList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDestinationDefinitionsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List all the destinationDefinitions the given workspace is configured to use
   * 
   * @param workspaceIdRequestBody  (optional)
   * @return DestinationDefinitionReadList
   * @throws ApiException if fails to make API call
   */
  public DestinationDefinitionReadList listDestinationDefinitionsForWorkspace(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    ApiResponse<DestinationDefinitionReadList> localVarResponse = listDestinationDefinitionsForWorkspaceWithHttpInfo(workspaceIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * List all the destinationDefinitions the given workspace is configured to use
   * 
   * @param workspaceIdRequestBody  (optional)
   * @return ApiResponse&lt;DestinationDefinitionReadList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DestinationDefinitionReadList> listDestinationDefinitionsForWorkspaceWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDestinationDefinitionsForWorkspaceRequestBuilder(workspaceIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDestinationDefinitionsForWorkspace", localVarResponse);
        }
        return new ApiResponse<DestinationDefinitionReadList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DestinationDefinitionReadList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDestinationDefinitionsForWorkspaceRequestBuilder(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/list_for_workspace";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(workspaceIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List the latest destinationDefinitions Airbyte supports
   * Guaranteed to retrieve the latest information on supported destinations.
   * @return DestinationDefinitionReadList
   * @throws ApiException if fails to make API call
   */
  public DestinationDefinitionReadList listLatestDestinationDefinitions() throws ApiException {
    ApiResponse<DestinationDefinitionReadList> localVarResponse = listLatestDestinationDefinitionsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List the latest destinationDefinitions Airbyte supports
   * Guaranteed to retrieve the latest information on supported destinations.
   * @return ApiResponse&lt;DestinationDefinitionReadList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DestinationDefinitionReadList> listLatestDestinationDefinitionsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listLatestDestinationDefinitionsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listLatestDestinationDefinitions", localVarResponse);
        }
        return new ApiResponse<DestinationDefinitionReadList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DestinationDefinitionReadList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listLatestDestinationDefinitionsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/list_latest";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List all private, non-custom destinationDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace&#39;s grants.
   * 
   * @param workspaceIdRequestBody  (optional)
   * @return PrivateDestinationDefinitionReadList
   * @throws ApiException if fails to make API call
   */
  public PrivateDestinationDefinitionReadList listPrivateDestinationDefinitions(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    ApiResponse<PrivateDestinationDefinitionReadList> localVarResponse = listPrivateDestinationDefinitionsWithHttpInfo(workspaceIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * List all private, non-custom destinationDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace&#39;s grants.
   * 
   * @param workspaceIdRequestBody  (optional)
   * @return ApiResponse&lt;PrivateDestinationDefinitionReadList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PrivateDestinationDefinitionReadList> listPrivateDestinationDefinitionsWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listPrivateDestinationDefinitionsRequestBuilder(workspaceIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listPrivateDestinationDefinitions", localVarResponse);
        }
        return new ApiResponse<PrivateDestinationDefinitionReadList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PrivateDestinationDefinitionReadList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listPrivateDestinationDefinitionsRequestBuilder(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/list_private";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(workspaceIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * revoke a grant to a private, non-custom destinationDefinition from a given workspace
   * 
   * @param destinationDefinitionIdWithWorkspaceId  (required)
   * @throws ApiException if fails to make API call
   */
  public void revokeDestinationDefinitionFromWorkspace(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
    revokeDestinationDefinitionFromWorkspaceWithHttpInfo(destinationDefinitionIdWithWorkspaceId);
  }

  /**
   * revoke a grant to a private, non-custom destinationDefinition from a given workspace
   * 
   * @param destinationDefinitionIdWithWorkspaceId  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> revokeDestinationDefinitionFromWorkspaceWithHttpInfo(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revokeDestinationDefinitionFromWorkspaceRequestBuilder(destinationDefinitionIdWithWorkspaceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revokeDestinationDefinitionFromWorkspace", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revokeDestinationDefinitionFromWorkspaceRequestBuilder(DestinationDefinitionIdWithWorkspaceId destinationDefinitionIdWithWorkspaceId) throws ApiException {
    // verify the required parameter 'destinationDefinitionIdWithWorkspaceId' is set
    if (destinationDefinitionIdWithWorkspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'destinationDefinitionIdWithWorkspaceId' when calling revokeDestinationDefinitionFromWorkspace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/revoke_definition";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(destinationDefinitionIdWithWorkspaceId);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update destinationDefinition
   * 
   * @param destinationDefinitionUpdate  (required)
   * @return DestinationDefinitionRead
   * @throws ApiException if fails to make API call
   */
  public DestinationDefinitionRead updateDestinationDefinition(DestinationDefinitionUpdate destinationDefinitionUpdate) throws ApiException {
    ApiResponse<DestinationDefinitionRead> localVarResponse = updateDestinationDefinitionWithHttpInfo(destinationDefinitionUpdate);
    return localVarResponse.getData();
  }

  /**
   * Update destinationDefinition
   * 
   * @param destinationDefinitionUpdate  (required)
   * @return ApiResponse&lt;DestinationDefinitionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DestinationDefinitionRead> updateDestinationDefinitionWithHttpInfo(DestinationDefinitionUpdate destinationDefinitionUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDestinationDefinitionRequestBuilder(destinationDefinitionUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDestinationDefinition", localVarResponse);
        }
        return new ApiResponse<DestinationDefinitionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DestinationDefinitionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDestinationDefinitionRequestBuilder(DestinationDefinitionUpdate destinationDefinitionUpdate) throws ApiException {
    // verify the required parameter 'destinationDefinitionUpdate' is set
    if (destinationDefinitionUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'destinationDefinitionUpdate' when calling updateDestinationDefinition");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/destination_definitions/update";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(destinationDefinitionUpdate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
