/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CompleteSourceOauthRequest
 */
@JsonPropertyOrder({
  CompleteSourceOauthRequest.JSON_PROPERTY_SOURCE_DEFINITION_ID,
  CompleteSourceOauthRequest.JSON_PROPERTY_WORKSPACE_ID,
  CompleteSourceOauthRequest.JSON_PROPERTY_REDIRECT_URL,
  CompleteSourceOauthRequest.JSON_PROPERTY_QUERY_PARAMS,
  CompleteSourceOauthRequest.JSON_PROPERTY_O_AUTH_INPUT_CONFIGURATION,
  CompleteSourceOauthRequest.JSON_PROPERTY_SOURCE_ID
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class CompleteSourceOauthRequest {
  public static final String JSON_PROPERTY_SOURCE_DEFINITION_ID = "sourceDefinitionId";
  private UUID sourceDefinitionId;

  public static final String JSON_PROPERTY_WORKSPACE_ID = "workspaceId";
  private UUID workspaceId;

  public static final String JSON_PROPERTY_REDIRECT_URL = "redirectUrl";
  private String redirectUrl;

  public static final String JSON_PROPERTY_QUERY_PARAMS = "queryParams";
  private Map<String, Object> queryParams = null;

  public static final String JSON_PROPERTY_O_AUTH_INPUT_CONFIGURATION = "oAuthInputConfiguration";
  private com.fasterxml.jackson.databind.JsonNode oAuthInputConfiguration = null;

  public static final String JSON_PROPERTY_SOURCE_ID = "sourceId";
  private UUID sourceId;

  public CompleteSourceOauthRequest() { 
  }

  public CompleteSourceOauthRequest sourceDefinitionId(UUID sourceDefinitionId) {
    this.sourceDefinitionId = sourceDefinitionId;
    return this;
  }

   /**
   * Get sourceDefinitionId
   * @return sourceDefinitionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SOURCE_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getSourceDefinitionId() {
    return sourceDefinitionId;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSourceDefinitionId(UUID sourceDefinitionId) {
    this.sourceDefinitionId = sourceDefinitionId;
  }


  public CompleteSourceOauthRequest workspaceId(UUID workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

   /**
   * Get workspaceId
   * @return workspaceId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_WORKSPACE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getWorkspaceId() {
    return workspaceId;
  }


  @JsonProperty(JSON_PROPERTY_WORKSPACE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWorkspaceId(UUID workspaceId) {
    this.workspaceId = workspaceId;
  }


  public CompleteSourceOauthRequest redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * When completing OAuth flow to gain an access token, some API sometimes requires to verify that the app re-send the redirectUrl that was used when consent was given.
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When completing OAuth flow to gain an access token, some API sometimes requires to verify that the app re-send the redirectUrl that was used when consent was given.")
  @JsonProperty(JSON_PROPERTY_REDIRECT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRedirectUrl() {
    return redirectUrl;
  }


  @JsonProperty(JSON_PROPERTY_REDIRECT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public CompleteSourceOauthRequest queryParams(Map<String, Object> queryParams) {
    this.queryParams = queryParams;
    return this;
  }

  public CompleteSourceOauthRequest putQueryParamsItem(String key, Object queryParamsItem) {
    if (this.queryParams == null) {
      this.queryParams = new HashMap<>();
    }
    this.queryParams.put(key, queryParamsItem);
    return this;
  }

   /**
   * The query parameters present in the redirect URL after a user granted consent e.g auth code
   * @return queryParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The query parameters present in the redirect URL after a user granted consent e.g auth code")
  @JsonProperty(JSON_PROPERTY_QUERY_PARAMS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getQueryParams() {
    return queryParams;
  }


  @JsonProperty(JSON_PROPERTY_QUERY_PARAMS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueryParams(Map<String, Object> queryParams) {
    this.queryParams = queryParams;
  }


  public CompleteSourceOauthRequest oAuthInputConfiguration(com.fasterxml.jackson.databind.JsonNode oAuthInputConfiguration) {
    this.oAuthInputConfiguration = oAuthInputConfiguration;
    return this;
  }

   /**
   * Get oAuthInputConfiguration
   * @return oAuthInputConfiguration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_O_AUTH_INPUT_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public com.fasterxml.jackson.databind.JsonNode getoAuthInputConfiguration() {
    return oAuthInputConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_O_AUTH_INPUT_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setoAuthInputConfiguration(com.fasterxml.jackson.databind.JsonNode oAuthInputConfiguration) {
    this.oAuthInputConfiguration = oAuthInputConfiguration;
  }


  public CompleteSourceOauthRequest sourceId(UUID sourceId) {
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Get sourceId
   * @return sourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getSourceId() {
    return sourceId;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceId(UUID sourceId) {
    this.sourceId = sourceId;
  }


  /**
   * Return true if this CompleteSourceOauthRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompleteSourceOauthRequest completeSourceOauthRequest = (CompleteSourceOauthRequest) o;
    return Objects.equals(this.sourceDefinitionId, completeSourceOauthRequest.sourceDefinitionId) &&
        Objects.equals(this.workspaceId, completeSourceOauthRequest.workspaceId) &&
        Objects.equals(this.redirectUrl, completeSourceOauthRequest.redirectUrl) &&
        Objects.equals(this.queryParams, completeSourceOauthRequest.queryParams) &&
        Objects.equals(this.oAuthInputConfiguration, completeSourceOauthRequest.oAuthInputConfiguration) &&
        Objects.equals(this.sourceId, completeSourceOauthRequest.sourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceDefinitionId, workspaceId, redirectUrl, queryParams, oAuthInputConfiguration, sourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompleteSourceOauthRequest {\n");
    sb.append("    sourceDefinitionId: ").append(toIndentedString(sourceDefinitionId)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    queryParams: ").append(toIndentedString(queryParams)).append("\n");
    sb.append("    oAuthInputConfiguration: ").append(toIndentedString(oAuthInputConfiguration)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

