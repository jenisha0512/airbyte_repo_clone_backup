/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.FieldAdd;
import io.airbyte.api.client.model.generated.FieldRemove;
import io.airbyte.api.client.model.generated.FieldSchemaUpdate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Describes the difference between two Streams.
 */
@ApiModel(description = "Describes the difference between two Streams.")
@JsonPropertyOrder({
  FieldTransform.JSON_PROPERTY_TRANSFORM_TYPE,
  FieldTransform.JSON_PROPERTY_FIELD_NAME,
  FieldTransform.JSON_PROPERTY_BREAKING,
  FieldTransform.JSON_PROPERTY_ADD_FIELD,
  FieldTransform.JSON_PROPERTY_REMOVE_FIELD,
  FieldTransform.JSON_PROPERTY_UPDATE_FIELD_SCHEMA
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class FieldTransform {
  /**
   * Gets or Sets transformType
   */
  public enum TransformTypeEnum {
    ADD_FIELD("add_field"),
    
    REMOVE_FIELD("remove_field"),
    
    UPDATE_FIELD_SCHEMA("update_field_schema");

    private String value;

    TransformTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransformTypeEnum fromValue(String value) {
      for (TransformTypeEnum b : TransformTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRANSFORM_TYPE = "transformType";
  private TransformTypeEnum transformType;

  public static final String JSON_PROPERTY_FIELD_NAME = "fieldName";
  private List<String> fieldName = new ArrayList<>();

  public static final String JSON_PROPERTY_BREAKING = "breaking";
  private Boolean breaking;

  public static final String JSON_PROPERTY_ADD_FIELD = "addField";
  private FieldAdd addField;

  public static final String JSON_PROPERTY_REMOVE_FIELD = "removeField";
  private FieldRemove removeField;

  public static final String JSON_PROPERTY_UPDATE_FIELD_SCHEMA = "updateFieldSchema";
  private FieldSchemaUpdate updateFieldSchema;

  public FieldTransform() { 
  }

  public FieldTransform transformType(TransformTypeEnum transformType) {
    this.transformType = transformType;
    return this;
  }

   /**
   * Get transformType
   * @return transformType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TRANSFORM_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TransformTypeEnum getTransformType() {
    return transformType;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFORM_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransformType(TransformTypeEnum transformType) {
    this.transformType = transformType;
  }


  public FieldTransform fieldName(List<String> fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  public FieldTransform addFieldNameItem(String fieldNameItem) {
    this.fieldName.add(fieldNameItem);
    return this;
  }

   /**
   * A field name is a list of strings that form the path to the field.
   * @return fieldName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A field name is a list of strings that form the path to the field.")
  @JsonProperty(JSON_PROPERTY_FIELD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getFieldName() {
    return fieldName;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFieldName(List<String> fieldName) {
    this.fieldName = fieldName;
  }


  public FieldTransform breaking(Boolean breaking) {
    this.breaking = breaking;
    return this;
  }

   /**
   * Get breaking
   * @return breaking
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_BREAKING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getBreaking() {
    return breaking;
  }


  @JsonProperty(JSON_PROPERTY_BREAKING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBreaking(Boolean breaking) {
    this.breaking = breaking;
  }


  public FieldTransform addField(FieldAdd addField) {
    this.addField = addField;
    return this;
  }

   /**
   * Get addField
   * @return addField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ADD_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FieldAdd getAddField() {
    return addField;
  }


  @JsonProperty(JSON_PROPERTY_ADD_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddField(FieldAdd addField) {
    this.addField = addField;
  }


  public FieldTransform removeField(FieldRemove removeField) {
    this.removeField = removeField;
    return this;
  }

   /**
   * Get removeField
   * @return removeField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REMOVE_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FieldRemove getRemoveField() {
    return removeField;
  }


  @JsonProperty(JSON_PROPERTY_REMOVE_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoveField(FieldRemove removeField) {
    this.removeField = removeField;
  }


  public FieldTransform updateFieldSchema(FieldSchemaUpdate updateFieldSchema) {
    this.updateFieldSchema = updateFieldSchema;
    return this;
  }

   /**
   * Get updateFieldSchema
   * @return updateFieldSchema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_UPDATE_FIELD_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FieldSchemaUpdate getUpdateFieldSchema() {
    return updateFieldSchema;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_FIELD_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateFieldSchema(FieldSchemaUpdate updateFieldSchema) {
    this.updateFieldSchema = updateFieldSchema;
  }


  /**
   * Return true if this FieldTransform object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldTransform fieldTransform = (FieldTransform) o;
    return Objects.equals(this.transformType, fieldTransform.transformType) &&
        Objects.equals(this.fieldName, fieldTransform.fieldName) &&
        Objects.equals(this.breaking, fieldTransform.breaking) &&
        Objects.equals(this.addField, fieldTransform.addField) &&
        Objects.equals(this.removeField, fieldTransform.removeField) &&
        Objects.equals(this.updateFieldSchema, fieldTransform.updateFieldSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transformType, fieldName, breaking, addField, removeField, updateFieldSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldTransform {\n");
    sb.append("    transformType: ").append(toIndentedString(transformType)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    breaking: ").append(toIndentedString(breaking)).append("\n");
    sb.append("    addField: ").append(toIndentedString(addField)).append("\n");
    sb.append("    removeField: ").append(toIndentedString(removeField)).append("\n");
    sb.append("    updateFieldSchema: ").append(toIndentedString(updateFieldSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

