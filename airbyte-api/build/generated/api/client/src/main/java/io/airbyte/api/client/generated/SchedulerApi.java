/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.airbyte.api.client.generated;

import io.airbyte.api.client.invoker.generated.ApiClient;
import io.airbyte.api.client.invoker.generated.ApiException;
import io.airbyte.api.client.invoker.generated.ApiResponse;
import io.airbyte.api.client.invoker.generated.Pair;

import io.airbyte.api.client.model.generated.CheckConnectionRead;
import io.airbyte.api.client.model.generated.DestinationCoreConfig;
import io.airbyte.api.client.model.generated.InvalidInputExceptionInfo;
import io.airbyte.api.client.model.generated.SourceCoreConfig;
import io.airbyte.api.client.model.generated.SourceDiscoverSchemaRead;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class SchedulerApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public SchedulerApi() {
    this(new ApiClient());
  }

  public SchedulerApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Run check connection for a given destination configuration
   * 
   * @param destinationCoreConfig  (required)
   * @return CheckConnectionRead
   * @throws ApiException if fails to make API call
   */
  public CheckConnectionRead executeDestinationCheckConnection(DestinationCoreConfig destinationCoreConfig) throws ApiException {
    ApiResponse<CheckConnectionRead> localVarResponse = executeDestinationCheckConnectionWithHttpInfo(destinationCoreConfig);
    return localVarResponse.getData();
  }

  /**
   * Run check connection for a given destination configuration
   * 
   * @param destinationCoreConfig  (required)
   * @return ApiResponse&lt;CheckConnectionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CheckConnectionRead> executeDestinationCheckConnectionWithHttpInfo(DestinationCoreConfig destinationCoreConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = executeDestinationCheckConnectionRequestBuilder(destinationCoreConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("executeDestinationCheckConnection", localVarResponse);
        }
        return new ApiResponse<CheckConnectionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CheckConnectionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder executeDestinationCheckConnectionRequestBuilder(DestinationCoreConfig destinationCoreConfig) throws ApiException {
    // verify the required parameter 'destinationCoreConfig' is set
    if (destinationCoreConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'destinationCoreConfig' when calling executeDestinationCheckConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/scheduler/destinations/check_connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(destinationCoreConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Run check connection for a given source configuration
   * 
   * @param sourceCoreConfig  (required)
   * @return CheckConnectionRead
   * @throws ApiException if fails to make API call
   */
  public CheckConnectionRead executeSourceCheckConnection(SourceCoreConfig sourceCoreConfig) throws ApiException {
    ApiResponse<CheckConnectionRead> localVarResponse = executeSourceCheckConnectionWithHttpInfo(sourceCoreConfig);
    return localVarResponse.getData();
  }

  /**
   * Run check connection for a given source configuration
   * 
   * @param sourceCoreConfig  (required)
   * @return ApiResponse&lt;CheckConnectionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CheckConnectionRead> executeSourceCheckConnectionWithHttpInfo(SourceCoreConfig sourceCoreConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = executeSourceCheckConnectionRequestBuilder(sourceCoreConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("executeSourceCheckConnection", localVarResponse);
        }
        return new ApiResponse<CheckConnectionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CheckConnectionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder executeSourceCheckConnectionRequestBuilder(SourceCoreConfig sourceCoreConfig) throws ApiException {
    // verify the required parameter 'sourceCoreConfig' is set
    if (sourceCoreConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceCoreConfig' when calling executeSourceCheckConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/scheduler/sources/check_connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceCoreConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Run discover schema for a given source a source configuration
   * 
   * @param sourceCoreConfig  (required)
   * @return SourceDiscoverSchemaRead
   * @throws ApiException if fails to make API call
   */
  public SourceDiscoverSchemaRead executeSourceDiscoverSchema(SourceCoreConfig sourceCoreConfig) throws ApiException {
    ApiResponse<SourceDiscoverSchemaRead> localVarResponse = executeSourceDiscoverSchemaWithHttpInfo(sourceCoreConfig);
    return localVarResponse.getData();
  }

  /**
   * Run discover schema for a given source a source configuration
   * 
   * @param sourceCoreConfig  (required)
   * @return ApiResponse&lt;SourceDiscoverSchemaRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SourceDiscoverSchemaRead> executeSourceDiscoverSchemaWithHttpInfo(SourceCoreConfig sourceCoreConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = executeSourceDiscoverSchemaRequestBuilder(sourceCoreConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("executeSourceDiscoverSchema", localVarResponse);
        }
        return new ApiResponse<SourceDiscoverSchemaRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SourceDiscoverSchemaRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder executeSourceDiscoverSchemaRequestBuilder(SourceCoreConfig sourceCoreConfig) throws ApiException {
    // verify the required parameter 'sourceCoreConfig' is set
    if (sourceCoreConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceCoreConfig' when calling executeSourceDiscoverSchema");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/scheduler/sources/discover_schema";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceCoreConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
