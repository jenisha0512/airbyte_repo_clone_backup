/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.OperatorDbt;
import io.airbyte.api.client.model.generated.OperatorNormalization;
import io.airbyte.api.client.model.generated.OperatorType;
import io.airbyte.api.client.model.generated.OperatorWebhook;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * OperatorConfiguration
 */
@JsonPropertyOrder({
  OperatorConfiguration.JSON_PROPERTY_OPERATOR_TYPE,
  OperatorConfiguration.JSON_PROPERTY_NORMALIZATION,
  OperatorConfiguration.JSON_PROPERTY_DBT,
  OperatorConfiguration.JSON_PROPERTY_WEBHOOK
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class OperatorConfiguration {
  public static final String JSON_PROPERTY_OPERATOR_TYPE = "operatorType";
  private OperatorType operatorType;

  public static final String JSON_PROPERTY_NORMALIZATION = "normalization";
  private OperatorNormalization normalization;

  public static final String JSON_PROPERTY_DBT = "dbt";
  private OperatorDbt dbt;

  public static final String JSON_PROPERTY_WEBHOOK = "webhook";
  private OperatorWebhook webhook;

  public OperatorConfiguration() { 
  }

  public OperatorConfiguration operatorType(OperatorType operatorType) {
    this.operatorType = operatorType;
    return this;
  }

   /**
   * Get operatorType
   * @return operatorType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_OPERATOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OperatorType getOperatorType() {
    return operatorType;
  }


  @JsonProperty(JSON_PROPERTY_OPERATOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperatorType(OperatorType operatorType) {
    this.operatorType = operatorType;
  }


  public OperatorConfiguration normalization(OperatorNormalization normalization) {
    this.normalization = normalization;
    return this;
  }

   /**
   * Get normalization
   * @return normalization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_NORMALIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OperatorNormalization getNormalization() {
    return normalization;
  }


  @JsonProperty(JSON_PROPERTY_NORMALIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNormalization(OperatorNormalization normalization) {
    this.normalization = normalization;
  }


  public OperatorConfiguration dbt(OperatorDbt dbt) {
    this.dbt = dbt;
    return this;
  }

   /**
   * Get dbt
   * @return dbt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DBT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OperatorDbt getDbt() {
    return dbt;
  }


  @JsonProperty(JSON_PROPERTY_DBT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDbt(OperatorDbt dbt) {
    this.dbt = dbt;
  }


  public OperatorConfiguration webhook(OperatorWebhook webhook) {
    this.webhook = webhook;
    return this;
  }

   /**
   * Get webhook
   * @return webhook
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_WEBHOOK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OperatorWebhook getWebhook() {
    return webhook;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebhook(OperatorWebhook webhook) {
    this.webhook = webhook;
  }


  /**
   * Return true if this OperatorConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperatorConfiguration operatorConfiguration = (OperatorConfiguration) o;
    return Objects.equals(this.operatorType, operatorConfiguration.operatorType) &&
        Objects.equals(this.normalization, operatorConfiguration.normalization) &&
        Objects.equals(this.dbt, operatorConfiguration.dbt) &&
        Objects.equals(this.webhook, operatorConfiguration.webhook);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operatorType, normalization, dbt, webhook);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperatorConfiguration {\n");
    sb.append("    operatorType: ").append(toIndentedString(operatorType)).append("\n");
    sb.append("    normalization: ").append(toIndentedString(normalization)).append("\n");
    sb.append("    dbt: ").append(toIndentedString(dbt)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

