/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.JobConfigType;
import io.airbyte.api.client.model.generated.LogRead;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SynchronousJobRead
 */
@JsonPropertyOrder({
  SynchronousJobRead.JSON_PROPERTY_ID,
  SynchronousJobRead.JSON_PROPERTY_CONFIG_TYPE,
  SynchronousJobRead.JSON_PROPERTY_CONFIG_ID,
  SynchronousJobRead.JSON_PROPERTY_CREATED_AT,
  SynchronousJobRead.JSON_PROPERTY_ENDED_AT,
  SynchronousJobRead.JSON_PROPERTY_SUCCEEDED,
  SynchronousJobRead.JSON_PROPERTY_CONNECTOR_CONFIGURATION_UPDATED,
  SynchronousJobRead.JSON_PROPERTY_LOGS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class SynchronousJobRead {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_CONFIG_TYPE = "configType";
  private JobConfigType configType;

  public static final String JSON_PROPERTY_CONFIG_ID = "configId";
  private String configId;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  private Long createdAt;

  public static final String JSON_PROPERTY_ENDED_AT = "endedAt";
  private Long endedAt;

  public static final String JSON_PROPERTY_SUCCEEDED = "succeeded";
  private Boolean succeeded;

  public static final String JSON_PROPERTY_CONNECTOR_CONFIGURATION_UPDATED = "connectorConfigurationUpdated";
  private Boolean connectorConfigurationUpdated = false;

  public static final String JSON_PROPERTY_LOGS = "logs";
  private LogRead logs;

  public SynchronousJobRead() { 
  }

  public SynchronousJobRead id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public SynchronousJobRead configType(JobConfigType configType) {
    this.configType = configType;
    return this;
  }

   /**
   * Get configType
   * @return configType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONFIG_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public JobConfigType getConfigType() {
    return configType;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigType(JobConfigType configType) {
    this.configType = configType;
  }


  public SynchronousJobRead configId(String configId) {
    this.configId = configId;
    return this;
  }

   /**
   * only present if a config id was provided.
   * @return configId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "only present if a config id was provided.")
  @JsonProperty(JSON_PROPERTY_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConfigId() {
    return configId;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigId(String configId) {
    this.configId = configId;
  }


  public SynchronousJobRead createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }


  public SynchronousJobRead endedAt(Long endedAt) {
    this.endedAt = endedAt;
    return this;
  }

   /**
   * Get endedAt
   * @return endedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ENDED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEndedAt() {
    return endedAt;
  }


  @JsonProperty(JSON_PROPERTY_ENDED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndedAt(Long endedAt) {
    this.endedAt = endedAt;
  }


  public SynchronousJobRead succeeded(Boolean succeeded) {
    this.succeeded = succeeded;
    return this;
  }

   /**
   * Get succeeded
   * @return succeeded
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUCCEEDED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getSucceeded() {
    return succeeded;
  }


  @JsonProperty(JSON_PROPERTY_SUCCEEDED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSucceeded(Boolean succeeded) {
    this.succeeded = succeeded;
  }


  public SynchronousJobRead connectorConfigurationUpdated(Boolean connectorConfigurationUpdated) {
    this.connectorConfigurationUpdated = connectorConfigurationUpdated;
    return this;
  }

   /**
   * Get connectorConfigurationUpdated
   * @return connectorConfigurationUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CONNECTOR_CONFIGURATION_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getConnectorConfigurationUpdated() {
    return connectorConfigurationUpdated;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTOR_CONFIGURATION_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectorConfigurationUpdated(Boolean connectorConfigurationUpdated) {
    this.connectorConfigurationUpdated = connectorConfigurationUpdated;
  }


  public SynchronousJobRead logs(LogRead logs) {
    this.logs = logs;
    return this;
  }

   /**
   * Get logs
   * @return logs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LogRead getLogs() {
    return logs;
  }


  @JsonProperty(JSON_PROPERTY_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogs(LogRead logs) {
    this.logs = logs;
  }


  /**
   * Return true if this SynchronousJobRead object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SynchronousJobRead synchronousJobRead = (SynchronousJobRead) o;
    return Objects.equals(this.id, synchronousJobRead.id) &&
        Objects.equals(this.configType, synchronousJobRead.configType) &&
        Objects.equals(this.configId, synchronousJobRead.configId) &&
        Objects.equals(this.createdAt, synchronousJobRead.createdAt) &&
        Objects.equals(this.endedAt, synchronousJobRead.endedAt) &&
        Objects.equals(this.succeeded, synchronousJobRead.succeeded) &&
        Objects.equals(this.connectorConfigurationUpdated, synchronousJobRead.connectorConfigurationUpdated) &&
        Objects.equals(this.logs, synchronousJobRead.logs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, configType, configId, createdAt, endedAt, succeeded, connectorConfigurationUpdated, logs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SynchronousJobRead {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    succeeded: ").append(toIndentedString(succeeded)).append("\n");
    sb.append("    connectorConfigurationUpdated: ").append(toIndentedString(connectorConfigurationUpdated)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

