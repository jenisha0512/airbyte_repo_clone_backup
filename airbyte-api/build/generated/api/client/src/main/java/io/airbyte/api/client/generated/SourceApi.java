/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.airbyte.api.client.generated;

import io.airbyte.api.client.invoker.generated.ApiClient;
import io.airbyte.api.client.invoker.generated.ApiException;
import io.airbyte.api.client.invoker.generated.ApiResponse;
import io.airbyte.api.client.invoker.generated.Pair;

import io.airbyte.api.client.model.generated.ActorCatalogWithUpdatedAt;
import io.airbyte.api.client.model.generated.CheckConnectionRead;
import io.airbyte.api.client.model.generated.DiscoverCatalogResult;
import io.airbyte.api.client.model.generated.InvalidInputExceptionInfo;
import io.airbyte.api.client.model.generated.NotFoundKnownExceptionInfo;
import io.airbyte.api.client.model.generated.SourceCloneRequestBody;
import io.airbyte.api.client.model.generated.SourceCreate;
import io.airbyte.api.client.model.generated.SourceDiscoverSchemaRead;
import io.airbyte.api.client.model.generated.SourceDiscoverSchemaRequestBody;
import io.airbyte.api.client.model.generated.SourceDiscoverSchemaWriteRequestBody;
import io.airbyte.api.client.model.generated.SourceIdRequestBody;
import io.airbyte.api.client.model.generated.SourceRead;
import io.airbyte.api.client.model.generated.SourceReadList;
import io.airbyte.api.client.model.generated.SourceSearch;
import io.airbyte.api.client.model.generated.SourceUpdate;
import io.airbyte.api.client.model.generated.WorkspaceIdRequestBody;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class SourceApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public SourceApi() {
    this(new ApiClient());
  }

  public SourceApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Check connection to the source
   * 
   * @param sourceIdRequestBody  (required)
   * @return CheckConnectionRead
   * @throws ApiException if fails to make API call
   */
  public CheckConnectionRead checkConnectionToSource(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    ApiResponse<CheckConnectionRead> localVarResponse = checkConnectionToSourceWithHttpInfo(sourceIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Check connection to the source
   * 
   * @param sourceIdRequestBody  (required)
   * @return ApiResponse&lt;CheckConnectionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CheckConnectionRead> checkConnectionToSourceWithHttpInfo(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = checkConnectionToSourceRequestBuilder(sourceIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("checkConnectionToSource", localVarResponse);
        }
        return new ApiResponse<CheckConnectionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CheckConnectionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder checkConnectionToSourceRequestBuilder(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    // verify the required parameter 'sourceIdRequestBody' is set
    if (sourceIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceIdRequestBody' when calling checkConnectionToSource");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/check_connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check connection for a proposed update to a source
   * 
   * @param sourceUpdate  (required)
   * @return CheckConnectionRead
   * @throws ApiException if fails to make API call
   */
  public CheckConnectionRead checkConnectionToSourceForUpdate(SourceUpdate sourceUpdate) throws ApiException {
    ApiResponse<CheckConnectionRead> localVarResponse = checkConnectionToSourceForUpdateWithHttpInfo(sourceUpdate);
    return localVarResponse.getData();
  }

  /**
   * Check connection for a proposed update to a source
   * 
   * @param sourceUpdate  (required)
   * @return ApiResponse&lt;CheckConnectionRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CheckConnectionRead> checkConnectionToSourceForUpdateWithHttpInfo(SourceUpdate sourceUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = checkConnectionToSourceForUpdateRequestBuilder(sourceUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("checkConnectionToSourceForUpdate", localVarResponse);
        }
        return new ApiResponse<CheckConnectionRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CheckConnectionRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder checkConnectionToSourceForUpdateRequestBuilder(SourceUpdate sourceUpdate) throws ApiException {
    // verify the required parameter 'sourceUpdate' is set
    if (sourceUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceUpdate' when calling checkConnectionToSourceForUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/check_connection_for_update";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceUpdate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Clone source
   * 
   * @param sourceCloneRequestBody  (required)
   * @return SourceRead
   * @throws ApiException if fails to make API call
   */
  public SourceRead cloneSource(SourceCloneRequestBody sourceCloneRequestBody) throws ApiException {
    ApiResponse<SourceRead> localVarResponse = cloneSourceWithHttpInfo(sourceCloneRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Clone source
   * 
   * @param sourceCloneRequestBody  (required)
   * @return ApiResponse&lt;SourceRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SourceRead> cloneSourceWithHttpInfo(SourceCloneRequestBody sourceCloneRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cloneSourceRequestBuilder(sourceCloneRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("cloneSource", localVarResponse);
        }
        return new ApiResponse<SourceRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SourceRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cloneSourceRequestBuilder(SourceCloneRequestBody sourceCloneRequestBody) throws ApiException {
    // verify the required parameter 'sourceCloneRequestBody' is set
    if (sourceCloneRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceCloneRequestBody' when calling cloneSource");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/clone";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceCloneRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a source
   * 
   * @param sourceCreate  (required)
   * @return SourceRead
   * @throws ApiException if fails to make API call
   */
  public SourceRead createSource(SourceCreate sourceCreate) throws ApiException {
    ApiResponse<SourceRead> localVarResponse = createSourceWithHttpInfo(sourceCreate);
    return localVarResponse.getData();
  }

  /**
   * Create a source
   * 
   * @param sourceCreate  (required)
   * @return ApiResponse&lt;SourceRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SourceRead> createSourceWithHttpInfo(SourceCreate sourceCreate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSourceRequestBuilder(sourceCreate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createSource", localVarResponse);
        }
        return new ApiResponse<SourceRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SourceRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSourceRequestBuilder(SourceCreate sourceCreate) throws ApiException {
    // verify the required parameter 'sourceCreate' is set
    if (sourceCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceCreate' when calling createSource");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/create";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceCreate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a source
   * 
   * @param sourceIdRequestBody  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteSource(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    deleteSourceWithHttpInfo(sourceIdRequestBody);
  }

  /**
   * Delete a source
   * 
   * @param sourceIdRequestBody  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteSourceWithHttpInfo(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSourceRequestBuilder(sourceIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteSource", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSourceRequestBuilder(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    // verify the required parameter 'sourceIdRequestBody' is set
    if (sourceIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceIdRequestBody' when calling deleteSource");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/delete";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Discover the schema catalog of the source
   * 
   * @param sourceDiscoverSchemaRequestBody  (required)
   * @return SourceDiscoverSchemaRead
   * @throws ApiException if fails to make API call
   */
  public SourceDiscoverSchemaRead discoverSchemaForSource(SourceDiscoverSchemaRequestBody sourceDiscoverSchemaRequestBody) throws ApiException {
    ApiResponse<SourceDiscoverSchemaRead> localVarResponse = discoverSchemaForSourceWithHttpInfo(sourceDiscoverSchemaRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Discover the schema catalog of the source
   * 
   * @param sourceDiscoverSchemaRequestBody  (required)
   * @return ApiResponse&lt;SourceDiscoverSchemaRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SourceDiscoverSchemaRead> discoverSchemaForSourceWithHttpInfo(SourceDiscoverSchemaRequestBody sourceDiscoverSchemaRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = discoverSchemaForSourceRequestBuilder(sourceDiscoverSchemaRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("discoverSchemaForSource", localVarResponse);
        }
        return new ApiResponse<SourceDiscoverSchemaRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SourceDiscoverSchemaRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder discoverSchemaForSourceRequestBuilder(SourceDiscoverSchemaRequestBody sourceDiscoverSchemaRequestBody) throws ApiException {
    // verify the required parameter 'sourceDiscoverSchemaRequestBody' is set
    if (sourceDiscoverSchemaRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceDiscoverSchemaRequestBody' when calling discoverSchemaForSource");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/discover_schema";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceDiscoverSchemaRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get most recent ActorCatalog for source
   * 
   * @param sourceIdRequestBody  (required)
   * @return ActorCatalogWithUpdatedAt
   * @throws ApiException if fails to make API call
   */
  public ActorCatalogWithUpdatedAt getMostRecentSourceActorCatalog(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    ApiResponse<ActorCatalogWithUpdatedAt> localVarResponse = getMostRecentSourceActorCatalogWithHttpInfo(sourceIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Get most recent ActorCatalog for source
   * 
   * @param sourceIdRequestBody  (required)
   * @return ApiResponse&lt;ActorCatalogWithUpdatedAt&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ActorCatalogWithUpdatedAt> getMostRecentSourceActorCatalogWithHttpInfo(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMostRecentSourceActorCatalogRequestBuilder(sourceIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMostRecentSourceActorCatalog", localVarResponse);
        }
        return new ApiResponse<ActorCatalogWithUpdatedAt>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ActorCatalogWithUpdatedAt>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMostRecentSourceActorCatalogRequestBuilder(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    // verify the required parameter 'sourceIdRequestBody' is set
    if (sourceIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceIdRequestBody' when calling getMostRecentSourceActorCatalog");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/most_recent_source_actor_catalog";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get source
   * 
   * @param sourceIdRequestBody  (required)
   * @return SourceRead
   * @throws ApiException if fails to make API call
   */
  public SourceRead getSource(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    ApiResponse<SourceRead> localVarResponse = getSourceWithHttpInfo(sourceIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Get source
   * 
   * @param sourceIdRequestBody  (required)
   * @return ApiResponse&lt;SourceRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SourceRead> getSourceWithHttpInfo(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSourceRequestBuilder(sourceIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSource", localVarResponse);
        }
        return new ApiResponse<SourceRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SourceRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSourceRequestBuilder(SourceIdRequestBody sourceIdRequestBody) throws ApiException {
    // verify the required parameter 'sourceIdRequestBody' is set
    if (sourceIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceIdRequestBody' when calling getSource");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/get";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List sources for workspace
   * List sources for workspace. Does not return deleted sources.
   * @param workspaceIdRequestBody  (required)
   * @return SourceReadList
   * @throws ApiException if fails to make API call
   */
  public SourceReadList listSourcesForWorkspace(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    ApiResponse<SourceReadList> localVarResponse = listSourcesForWorkspaceWithHttpInfo(workspaceIdRequestBody);
    return localVarResponse.getData();
  }

  /**
   * List sources for workspace
   * List sources for workspace. Does not return deleted sources.
   * @param workspaceIdRequestBody  (required)
   * @return ApiResponse&lt;SourceReadList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SourceReadList> listSourcesForWorkspaceWithHttpInfo(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSourcesForWorkspaceRequestBuilder(workspaceIdRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSourcesForWorkspace", localVarResponse);
        }
        return new ApiResponse<SourceReadList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SourceReadList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSourcesForWorkspaceRequestBuilder(WorkspaceIdRequestBody workspaceIdRequestBody) throws ApiException {
    // verify the required parameter 'workspaceIdRequestBody' is set
    if (workspaceIdRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceIdRequestBody' when calling listSourcesForWorkspace");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(workspaceIdRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Search sources
   * 
   * @param sourceSearch  (required)
   * @return SourceReadList
   * @throws ApiException if fails to make API call
   */
  public SourceReadList searchSources(SourceSearch sourceSearch) throws ApiException {
    ApiResponse<SourceReadList> localVarResponse = searchSourcesWithHttpInfo(sourceSearch);
    return localVarResponse.getData();
  }

  /**
   * Search sources
   * 
   * @param sourceSearch  (required)
   * @return ApiResponse&lt;SourceReadList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SourceReadList> searchSourcesWithHttpInfo(SourceSearch sourceSearch) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchSourcesRequestBuilder(sourceSearch);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchSources", localVarResponse);
        }
        return new ApiResponse<SourceReadList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SourceReadList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchSourcesRequestBuilder(SourceSearch sourceSearch) throws ApiException {
    // verify the required parameter 'sourceSearch' is set
    if (sourceSearch == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceSearch' when calling searchSources");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/search";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceSearch);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a source
   * 
   * @param sourceUpdate  (required)
   * @return SourceRead
   * @throws ApiException if fails to make API call
   */
  public SourceRead updateSource(SourceUpdate sourceUpdate) throws ApiException {
    ApiResponse<SourceRead> localVarResponse = updateSourceWithHttpInfo(sourceUpdate);
    return localVarResponse.getData();
  }

  /**
   * Update a source
   * 
   * @param sourceUpdate  (required)
   * @return ApiResponse&lt;SourceRead&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SourceRead> updateSourceWithHttpInfo(SourceUpdate sourceUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSourceRequestBuilder(sourceUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateSource", localVarResponse);
        }
        return new ApiResponse<SourceRead>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SourceRead>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSourceRequestBuilder(SourceUpdate sourceUpdate) throws ApiException {
    // verify the required parameter 'sourceUpdate' is set
    if (sourceUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceUpdate' when calling updateSource");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/update";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceUpdate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Should only called from worker, to write result from discover activity back to DB.
   * 
   * @param sourceDiscoverSchemaWriteRequestBody  (required)
   * @return DiscoverCatalogResult
   * @throws ApiException if fails to make API call
   */
  public DiscoverCatalogResult writeDiscoverCatalogResult(SourceDiscoverSchemaWriteRequestBody sourceDiscoverSchemaWriteRequestBody) throws ApiException {
    ApiResponse<DiscoverCatalogResult> localVarResponse = writeDiscoverCatalogResultWithHttpInfo(sourceDiscoverSchemaWriteRequestBody);
    return localVarResponse.getData();
  }

  /**
   * Should only called from worker, to write result from discover activity back to DB.
   * 
   * @param sourceDiscoverSchemaWriteRequestBody  (required)
   * @return ApiResponse&lt;DiscoverCatalogResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DiscoverCatalogResult> writeDiscoverCatalogResultWithHttpInfo(SourceDiscoverSchemaWriteRequestBody sourceDiscoverSchemaWriteRequestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = writeDiscoverCatalogResultRequestBuilder(sourceDiscoverSchemaWriteRequestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("writeDiscoverCatalogResult", localVarResponse);
        }
        return new ApiResponse<DiscoverCatalogResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DiscoverCatalogResult>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder writeDiscoverCatalogResultRequestBuilder(SourceDiscoverSchemaWriteRequestBody sourceDiscoverSchemaWriteRequestBody) throws ApiException {
    // verify the required parameter 'sourceDiscoverSchemaWriteRequestBody' is set
    if (sourceDiscoverSchemaWriteRequestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceDiscoverSchemaWriteRequestBody' when calling writeDiscoverCatalogResult");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/sources/write_discover_catalog_result";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sourceDiscoverSchemaWriteRequestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
