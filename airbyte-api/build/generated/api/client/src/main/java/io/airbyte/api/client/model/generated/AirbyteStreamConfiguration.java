/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.DestinationSyncMode;
import io.airbyte.api.client.model.generated.SelectedFieldInfo;
import io.airbyte.api.client.model.generated.SyncMode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * the mutable part of the stream to configure the destination
 */
@ApiModel(description = "the mutable part of the stream to configure the destination")
@JsonPropertyOrder({
  AirbyteStreamConfiguration.JSON_PROPERTY_SYNC_MODE,
  AirbyteStreamConfiguration.JSON_PROPERTY_CURSOR_FIELD,
  AirbyteStreamConfiguration.JSON_PROPERTY_DESTINATION_SYNC_MODE,
  AirbyteStreamConfiguration.JSON_PROPERTY_PRIMARY_KEY,
  AirbyteStreamConfiguration.JSON_PROPERTY_ALIAS_NAME,
  AirbyteStreamConfiguration.JSON_PROPERTY_SELECTED,
  AirbyteStreamConfiguration.JSON_PROPERTY_SUGGESTED,
  AirbyteStreamConfiguration.JSON_PROPERTY_FIELD_SELECTION_ENABLED,
  AirbyteStreamConfiguration.JSON_PROPERTY_SELECTED_FIELDS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class AirbyteStreamConfiguration {
  public static final String JSON_PROPERTY_SYNC_MODE = "syncMode";
  private SyncMode syncMode;

  public static final String JSON_PROPERTY_CURSOR_FIELD = "cursorField";
  private List<String> cursorField = null;

  public static final String JSON_PROPERTY_DESTINATION_SYNC_MODE = "destinationSyncMode";
  private DestinationSyncMode destinationSyncMode;

  public static final String JSON_PROPERTY_PRIMARY_KEY = "primaryKey";
  private List<List<String>> primaryKey = null;

  public static final String JSON_PROPERTY_ALIAS_NAME = "aliasName";
  private String aliasName;

  public static final String JSON_PROPERTY_SELECTED = "selected";
  private Boolean selected;

  public static final String JSON_PROPERTY_SUGGESTED = "suggested";
  private Boolean suggested;

  public static final String JSON_PROPERTY_FIELD_SELECTION_ENABLED = "fieldSelectionEnabled";
  private Boolean fieldSelectionEnabled;

  public static final String JSON_PROPERTY_SELECTED_FIELDS = "selectedFields";
  private List<SelectedFieldInfo> selectedFields = null;

  public AirbyteStreamConfiguration() { 
  }

  public AirbyteStreamConfiguration syncMode(SyncMode syncMode) {
    this.syncMode = syncMode;
    return this;
  }

   /**
   * Get syncMode
   * @return syncMode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SYNC_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SyncMode getSyncMode() {
    return syncMode;
  }


  @JsonProperty(JSON_PROPERTY_SYNC_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSyncMode(SyncMode syncMode) {
    this.syncMode = syncMode;
  }


  public AirbyteStreamConfiguration cursorField(List<String> cursorField) {
    this.cursorField = cursorField;
    return this;
  }

  public AirbyteStreamConfiguration addCursorFieldItem(String cursorFieldItem) {
    if (this.cursorField == null) {
      this.cursorField = new ArrayList<>();
    }
    this.cursorField.add(cursorFieldItem);
    return this;
  }

   /**
   * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if &#x60;sync_mode&#x60; is &#x60;incremental&#x60;. Otherwise it is ignored.
   * @return cursorField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.")
  @JsonProperty(JSON_PROPERTY_CURSOR_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCursorField() {
    return cursorField;
  }


  @JsonProperty(JSON_PROPERTY_CURSOR_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCursorField(List<String> cursorField) {
    this.cursorField = cursorField;
  }


  public AirbyteStreamConfiguration destinationSyncMode(DestinationSyncMode destinationSyncMode) {
    this.destinationSyncMode = destinationSyncMode;
    return this;
  }

   /**
   * Get destinationSyncMode
   * @return destinationSyncMode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DESTINATION_SYNC_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DestinationSyncMode getDestinationSyncMode() {
    return destinationSyncMode;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_SYNC_MODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDestinationSyncMode(DestinationSyncMode destinationSyncMode) {
    this.destinationSyncMode = destinationSyncMode;
  }


  public AirbyteStreamConfiguration primaryKey(List<List<String>> primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

  public AirbyteStreamConfiguration addPrimaryKeyItem(List<String> primaryKeyItem) {
    if (this.primaryKey == null) {
      this.primaryKey = new ArrayList<>();
    }
    this.primaryKey.add(primaryKeyItem);
    return this;
  }

   /**
   * Paths to the fields that will be used as primary key. This field is REQUIRED if &#x60;destination_sync_mode&#x60; is &#x60;*_dedup&#x60;. Otherwise it is ignored.
   * @return primaryKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.")
  @JsonProperty(JSON_PROPERTY_PRIMARY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<String>> getPrimaryKey() {
    return primaryKey;
  }


  @JsonProperty(JSON_PROPERTY_PRIMARY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimaryKey(List<List<String>> primaryKey) {
    this.primaryKey = primaryKey;
  }


  public AirbyteStreamConfiguration aliasName(String aliasName) {
    this.aliasName = aliasName;
    return this;
  }

   /**
   * Alias name to the stream to be used in the destination
   * @return aliasName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Alias name to the stream to be used in the destination")
  @JsonProperty(JSON_PROPERTY_ALIAS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAliasName() {
    return aliasName;
  }


  @JsonProperty(JSON_PROPERTY_ALIAS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAliasName(String aliasName) {
    this.aliasName = aliasName;
  }


  public AirbyteStreamConfiguration selected(Boolean selected) {
    this.selected = selected;
    return this;
  }

   /**
   * If this is true, the stream is selected with all of its properties. For new connections, this considers if the stream is suggested or not
   * @return selected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this is true, the stream is selected with all of its properties. For new connections, this considers if the stream is suggested or not")
  @JsonProperty(JSON_PROPERTY_SELECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSelected() {
    return selected;
  }


  @JsonProperty(JSON_PROPERTY_SELECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelected(Boolean selected) {
    this.selected = selected;
  }


  public AirbyteStreamConfiguration suggested(Boolean suggested) {
    this.suggested = suggested;
    return this;
  }

   /**
   * Does the connector suggest that this stream be enabled by default?
   * @return suggested
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Does the connector suggest that this stream be enabled by default?")
  @JsonProperty(JSON_PROPERTY_SUGGESTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuggested() {
    return suggested;
  }


  @JsonProperty(JSON_PROPERTY_SUGGESTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuggested(Boolean suggested) {
    this.suggested = suggested;
  }


  public AirbyteStreamConfiguration fieldSelectionEnabled(Boolean fieldSelectionEnabled) {
    this.fieldSelectionEnabled = fieldSelectionEnabled;
    return this;
  }

   /**
   * Whether field selection should be enabled. If this is true, only the properties in &#x60;selectedFields&#x60; will be included.
   * @return fieldSelectionEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether field selection should be enabled. If this is true, only the properties in `selectedFields` will be included.")
  @JsonProperty(JSON_PROPERTY_FIELD_SELECTION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFieldSelectionEnabled() {
    return fieldSelectionEnabled;
  }


  @JsonProperty(JSON_PROPERTY_FIELD_SELECTION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFieldSelectionEnabled(Boolean fieldSelectionEnabled) {
    this.fieldSelectionEnabled = fieldSelectionEnabled;
  }


  public AirbyteStreamConfiguration selectedFields(List<SelectedFieldInfo> selectedFields) {
    this.selectedFields = selectedFields;
    return this;
  }

  public AirbyteStreamConfiguration addSelectedFieldsItem(SelectedFieldInfo selectedFieldsItem) {
    if (this.selectedFields == null) {
      this.selectedFields = new ArrayList<>();
    }
    this.selectedFields.add(selectedFieldsItem);
    return this;
  }

   /**
   * Paths to the fields that will be included in the configured catalog. This must be set if &#x60;fieldSelectedEnabled&#x60; is set. An empty list indicates that no properties will be included.
   * @return selectedFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Paths to the fields that will be included in the configured catalog. This must be set if `fieldSelectedEnabled` is set. An empty list indicates that no properties will be included.")
  @JsonProperty(JSON_PROPERTY_SELECTED_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SelectedFieldInfo> getSelectedFields() {
    return selectedFields;
  }


  @JsonProperty(JSON_PROPERTY_SELECTED_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelectedFields(List<SelectedFieldInfo> selectedFields) {
    this.selectedFields = selectedFields;
  }


  /**
   * Return true if this AirbyteStreamConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirbyteStreamConfiguration airbyteStreamConfiguration = (AirbyteStreamConfiguration) o;
    return Objects.equals(this.syncMode, airbyteStreamConfiguration.syncMode) &&
        Objects.equals(this.cursorField, airbyteStreamConfiguration.cursorField) &&
        Objects.equals(this.destinationSyncMode, airbyteStreamConfiguration.destinationSyncMode) &&
        Objects.equals(this.primaryKey, airbyteStreamConfiguration.primaryKey) &&
        Objects.equals(this.aliasName, airbyteStreamConfiguration.aliasName) &&
        Objects.equals(this.selected, airbyteStreamConfiguration.selected) &&
        Objects.equals(this.suggested, airbyteStreamConfiguration.suggested) &&
        Objects.equals(this.fieldSelectionEnabled, airbyteStreamConfiguration.fieldSelectionEnabled) &&
        Objects.equals(this.selectedFields, airbyteStreamConfiguration.selectedFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(syncMode, cursorField, destinationSyncMode, primaryKey, aliasName, selected, suggested, fieldSelectionEnabled, selectedFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirbyteStreamConfiguration {\n");
    sb.append("    syncMode: ").append(toIndentedString(syncMode)).append("\n");
    sb.append("    cursorField: ").append(toIndentedString(cursorField)).append("\n");
    sb.append("    destinationSyncMode: ").append(toIndentedString(destinationSyncMode)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    aliasName: ").append(toIndentedString(aliasName)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    suggested: ").append(toIndentedString(suggested)).append("\n");
    sb.append("    fieldSelectionEnabled: ").append(toIndentedString(fieldSelectionEnabled)).append("\n");
    sb.append("    selectedFields: ").append(toIndentedString(selectedFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

