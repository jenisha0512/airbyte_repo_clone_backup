/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.OperatorWebhookDbtCloud;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * OperatorWebhook
 */
@JsonPropertyOrder({
  OperatorWebhook.JSON_PROPERTY_WEBHOOK_CONFIG_ID,
  OperatorWebhook.JSON_PROPERTY_WEBHOOK_TYPE,
  OperatorWebhook.JSON_PROPERTY_DBT_CLOUD,
  OperatorWebhook.JSON_PROPERTY_EXECUTION_URL,
  OperatorWebhook.JSON_PROPERTY_EXECUTION_BODY
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class OperatorWebhook {
  public static final String JSON_PROPERTY_WEBHOOK_CONFIG_ID = "webhookConfigId";
  private UUID webhookConfigId;

  /**
   * Gets or Sets webhookType
   */
  public enum WebhookTypeEnum {
    DBTCLOUD("dbtCloud");

    private String value;

    WebhookTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WebhookTypeEnum fromValue(String value) {
      for (WebhookTypeEnum b : WebhookTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_WEBHOOK_TYPE = "webhookType";
  private WebhookTypeEnum webhookType;

  public static final String JSON_PROPERTY_DBT_CLOUD = "dbtCloud";
  private OperatorWebhookDbtCloud dbtCloud;

  public static final String JSON_PROPERTY_EXECUTION_URL = "executionUrl";
  private String executionUrl;

  public static final String JSON_PROPERTY_EXECUTION_BODY = "executionBody";
  private String executionBody;

  public OperatorWebhook() { 
  }

  public OperatorWebhook webhookConfigId(UUID webhookConfigId) {
    this.webhookConfigId = webhookConfigId;
    return this;
  }

   /**
   * The id of the webhook configs to use from the workspace.
   * @return webhookConfigId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the webhook configs to use from the workspace.")
  @JsonProperty(JSON_PROPERTY_WEBHOOK_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getWebhookConfigId() {
    return webhookConfigId;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebhookConfigId(UUID webhookConfigId) {
    this.webhookConfigId = webhookConfigId;
  }


  public OperatorWebhook webhookType(WebhookTypeEnum webhookType) {
    this.webhookType = webhookType;
    return this;
  }

   /**
   * Get webhookType
   * @return webhookType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_WEBHOOK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WebhookTypeEnum getWebhookType() {
    return webhookType;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebhookType(WebhookTypeEnum webhookType) {
    this.webhookType = webhookType;
  }


  public OperatorWebhook dbtCloud(OperatorWebhookDbtCloud dbtCloud) {
    this.dbtCloud = dbtCloud;
    return this;
  }

   /**
   * Get dbtCloud
   * @return dbtCloud
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DBT_CLOUD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OperatorWebhookDbtCloud getDbtCloud() {
    return dbtCloud;
  }


  @JsonProperty(JSON_PROPERTY_DBT_CLOUD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDbtCloud(OperatorWebhookDbtCloud dbtCloud) {
    this.dbtCloud = dbtCloud;
  }


  public OperatorWebhook executionUrl(String executionUrl) {
    this.executionUrl = executionUrl;
    return this;
  }

   /**
   * DEPRECATED. Populate dbtCloud instead.
   * @return executionUrl
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DEPRECATED. Populate dbtCloud instead.")
  @JsonProperty(JSON_PROPERTY_EXECUTION_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExecutionUrl() {
    return executionUrl;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTION_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecutionUrl(String executionUrl) {
    this.executionUrl = executionUrl;
  }


  public OperatorWebhook executionBody(String executionBody) {
    this.executionBody = executionBody;
    return this;
  }

   /**
   * DEPRECATED. Populate dbtCloud instead.
   * @return executionBody
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DEPRECATED. Populate dbtCloud instead.")
  @JsonProperty(JSON_PROPERTY_EXECUTION_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExecutionBody() {
    return executionBody;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTION_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecutionBody(String executionBody) {
    this.executionBody = executionBody;
  }


  /**
   * Return true if this OperatorWebhook object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperatorWebhook operatorWebhook = (OperatorWebhook) o;
    return Objects.equals(this.webhookConfigId, operatorWebhook.webhookConfigId) &&
        Objects.equals(this.webhookType, operatorWebhook.webhookType) &&
        Objects.equals(this.dbtCloud, operatorWebhook.dbtCloud) &&
        Objects.equals(this.executionUrl, operatorWebhook.executionUrl) &&
        Objects.equals(this.executionBody, operatorWebhook.executionBody);
  }

  @Override
  public int hashCode() {
    return Objects.hash(webhookConfigId, webhookType, dbtCloud, executionUrl, executionBody);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperatorWebhook {\n");
    sb.append("    webhookConfigId: ").append(toIndentedString(webhookConfigId)).append("\n");
    sb.append("    webhookType: ").append(toIndentedString(webhookType)).append("\n");
    sb.append("    dbtCloud: ").append(toIndentedString(dbtCloud)).append("\n");
    sb.append("    executionUrl: ").append(toIndentedString(executionUrl)).append("\n");
    sb.append("    executionBody: ").append(toIndentedString(executionBody)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

