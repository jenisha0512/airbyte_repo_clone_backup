/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.JobTypeResourceLimit;
import io.airbyte.api.client.model.generated.ResourceRequirements;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
 */
@ApiModel(description = "actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.")
@JsonPropertyOrder({
  ActorDefinitionResourceRequirements.JSON_PROPERTY_DEFAULT,
  ActorDefinitionResourceRequirements.JSON_PROPERTY_JOB_SPECIFIC
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-28T19:52:03.511752+05:30[Asia/Kolkata]")
public class ActorDefinitionResourceRequirements {
  public static final String JSON_PROPERTY_DEFAULT = "default";
  private ResourceRequirements _default;

  public static final String JSON_PROPERTY_JOB_SPECIFIC = "jobSpecific";
  private List<JobTypeResourceLimit> jobSpecific = null;

  public ActorDefinitionResourceRequirements() { 
  }

  public ActorDefinitionResourceRequirements _default(ResourceRequirements _default) {
    this._default = _default;
    return this;
  }

   /**
   * Get _default
   * @return _default
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DEFAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResourceRequirements getDefault() {
    return _default;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefault(ResourceRequirements _default) {
    this._default = _default;
  }


  public ActorDefinitionResourceRequirements jobSpecific(List<JobTypeResourceLimit> jobSpecific) {
    this.jobSpecific = jobSpecific;
    return this;
  }

  public ActorDefinitionResourceRequirements addJobSpecificItem(JobTypeResourceLimit jobSpecificItem) {
    if (this.jobSpecific == null) {
      this.jobSpecific = new ArrayList<>();
    }
    this.jobSpecific.add(jobSpecificItem);
    return this;
  }

   /**
   * Get jobSpecific
   * @return jobSpecific
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_JOB_SPECIFIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<JobTypeResourceLimit> getJobSpecific() {
    return jobSpecific;
  }


  @JsonProperty(JSON_PROPERTY_JOB_SPECIFIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJobSpecific(List<JobTypeResourceLimit> jobSpecific) {
    this.jobSpecific = jobSpecific;
  }


  /**
   * Return true if this ActorDefinitionResourceRequirements object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActorDefinitionResourceRequirements actorDefinitionResourceRequirements = (ActorDefinitionResourceRequirements) o;
    return Objects.equals(this._default, actorDefinitionResourceRequirements._default) &&
        Objects.equals(this.jobSpecific, actorDefinitionResourceRequirements.jobSpecific);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_default, jobSpecific);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActorDefinitionResourceRequirements {\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    jobSpecific: ").append(toIndentedString(jobSpecific)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

