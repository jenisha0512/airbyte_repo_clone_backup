/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.generated;

import io.airbyte.api.client.invoker.generated.ApiException;
import io.airbyte.api.client.model.generated.ConnectionIdRequestBody;
import io.airbyte.api.client.model.generated.InvalidInputExceptionInfo;
import io.airbyte.api.client.model.generated.NotFoundKnownExceptionInfo;
import io.airbyte.api.client.model.generated.SlugRequestBody;
import io.airbyte.api.client.model.generated.WorkspaceCreate;
import io.airbyte.api.client.model.generated.WorkspaceGiveFeedback;
import io.airbyte.api.client.model.generated.WorkspaceIdRequestBody;
import io.airbyte.api.client.model.generated.WorkspaceRead;
import io.airbyte.api.client.model.generated.WorkspaceReadList;
import io.airbyte.api.client.model.generated.WorkspaceUpdate;
import io.airbyte.api.client.model.generated.WorkspaceUpdateName;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for WorkspaceApi
 */
@Ignore
public class WorkspaceApiTest {

    private final WorkspaceApi api = new WorkspaceApi();

    
    /**
     * Creates a workspace
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWorkspaceTest() throws ApiException {
        WorkspaceCreate workspaceCreate = null;
        WorkspaceRead response = 
        api.createWorkspace(workspaceCreate);
        
        // TODO: test validations
    }
    
    /**
     * Deletes a workspace
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWorkspaceTest() throws ApiException {
        WorkspaceIdRequestBody workspaceIdRequestBody = null;
        
        api.deleteWorkspace(workspaceIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Find workspace by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkspaceTest() throws ApiException {
        WorkspaceIdRequestBody workspaceIdRequestBody = null;
        WorkspaceRead response = 
        api.getWorkspace(workspaceIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Find workspace by connection id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkspaceByConnectionIdTest() throws ApiException {
        ConnectionIdRequestBody connectionIdRequestBody = null;
        WorkspaceRead response = 
        api.getWorkspaceByConnectionId(connectionIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Find workspace by slug
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkspaceBySlugTest() throws ApiException {
        SlugRequestBody slugRequestBody = null;
        WorkspaceRead response = 
        api.getWorkspaceBySlug(slugRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * List all workspaces registered in the current Airbyte deployment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listWorkspacesTest() throws ApiException {
        WorkspaceReadList response = 
        api.listWorkspaces();
        
        // TODO: test validations
    }
    
    /**
     * Update workspace state
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWorkspaceTest() throws ApiException {
        WorkspaceUpdate workspaceUpdate = null;
        WorkspaceRead response = 
        api.updateWorkspace(workspaceUpdate);
        
        // TODO: test validations
    }
    
    /**
     * Update workspace feedback state
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWorkspaceFeedbackTest() throws ApiException {
        WorkspaceGiveFeedback workspaceGiveFeedback = null;
        
        api.updateWorkspaceFeedback(workspaceGiveFeedback);
        
        // TODO: test validations
    }
    
    /**
     * Update workspace name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWorkspaceNameTest() throws ApiException {
        WorkspaceUpdateName workspaceUpdateName = null;
        WorkspaceRead response = 
        api.updateWorkspaceName(workspaceUpdateName);
        
        // TODO: test validations
    }
    
}
