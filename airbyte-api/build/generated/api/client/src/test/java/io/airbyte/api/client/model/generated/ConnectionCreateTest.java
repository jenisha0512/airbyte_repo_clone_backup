/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.model.generated;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.airbyte.api.client.model.generated.AirbyteCatalog;
import io.airbyte.api.client.model.generated.ConnectionSchedule;
import io.airbyte.api.client.model.generated.ConnectionScheduleData;
import io.airbyte.api.client.model.generated.ConnectionScheduleType;
import io.airbyte.api.client.model.generated.ConnectionStatus;
import io.airbyte.api.client.model.generated.Geography;
import io.airbyte.api.client.model.generated.NamespaceDefinitionType;
import io.airbyte.api.client.model.generated.NonBreakingChangesPreference;
import io.airbyte.api.client.model.generated.ResourceRequirements;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ConnectionCreate
 */
public class ConnectionCreateTest {
    private final ConnectionCreate model = new ConnectionCreate();

    /**
     * Model tests for ConnectionCreate
     */
    @Test
    public void testConnectionCreate() {
        // TODO: test ConnectionCreate
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'namespaceDefinition'
     */
    @Test
    public void namespaceDefinitionTest() {
        // TODO: test namespaceDefinition
    }

    /**
     * Test the property 'namespaceFormat'
     */
    @Test
    public void namespaceFormatTest() {
        // TODO: test namespaceFormat
    }

    /**
     * Test the property 'prefix'
     */
    @Test
    public void prefixTest() {
        // TODO: test prefix
    }

    /**
     * Test the property 'sourceId'
     */
    @Test
    public void sourceIdTest() {
        // TODO: test sourceId
    }

    /**
     * Test the property 'destinationId'
     */
    @Test
    public void destinationIdTest() {
        // TODO: test destinationId
    }

    /**
     * Test the property 'operationIds'
     */
    @Test
    public void operationIdsTest() {
        // TODO: test operationIds
    }

    /**
     * Test the property 'syncCatalog'
     */
    @Test
    public void syncCatalogTest() {
        // TODO: test syncCatalog
    }

    /**
     * Test the property 'schedule'
     */
    @Test
    public void scheduleTest() {
        // TODO: test schedule
    }

    /**
     * Test the property 'scheduleType'
     */
    @Test
    public void scheduleTypeTest() {
        // TODO: test scheduleType
    }

    /**
     * Test the property 'scheduleData'
     */
    @Test
    public void scheduleDataTest() {
        // TODO: test scheduleData
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'resourceRequirements'
     */
    @Test
    public void resourceRequirementsTest() {
        // TODO: test resourceRequirements
    }

    /**
     * Test the property 'sourceCatalogId'
     */
    @Test
    public void sourceCatalogIdTest() {
        // TODO: test sourceCatalogId
    }

    /**
     * Test the property 'geography'
     */
    @Test
    public void geographyTest() {
        // TODO: test geography
    }

    /**
     * Test the property 'notifySchemaChanges'
     */
    @Test
    public void notifySchemaChangesTest() {
        // TODO: test notifySchemaChanges
    }

    /**
     * Test the property 'nonBreakingChangesPreference'
     */
    @Test
    public void nonBreakingChangesPreferenceTest() {
        // TODO: test nonBreakingChangesPreference
    }

}
