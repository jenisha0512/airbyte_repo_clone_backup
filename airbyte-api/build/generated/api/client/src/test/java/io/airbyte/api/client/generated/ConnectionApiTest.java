/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.generated;

import io.airbyte.api.client.invoker.generated.ApiException;
import io.airbyte.api.client.model.generated.ConnectionCreate;
import io.airbyte.api.client.model.generated.ConnectionIdRequestBody;
import io.airbyte.api.client.model.generated.ConnectionRead;
import io.airbyte.api.client.model.generated.ConnectionReadList;
import io.airbyte.api.client.model.generated.ConnectionSearch;
import io.airbyte.api.client.model.generated.ConnectionUpdate;
import io.airbyte.api.client.model.generated.InvalidInputExceptionInfo;
import io.airbyte.api.client.model.generated.JobInfoRead;
import io.airbyte.api.client.model.generated.NotFoundKnownExceptionInfo;
import io.airbyte.api.client.model.generated.WorkspaceIdRequestBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ConnectionApi
 */
@Ignore
public class ConnectionApiTest {

    private final ConnectionApi api = new ConnectionApi();

    
    /**
     * Create a connection between a source and a destination
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConnectionTest() throws ApiException {
        ConnectionCreate connectionCreate = null;
        ConnectionRead response = 
        api.createConnection(connectionCreate);
        
        // TODO: test validations
    }
    
    /**
     * Delete a connection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConnectionTest() throws ApiException {
        ConnectionIdRequestBody connectionIdRequestBody = null;
        
        api.deleteConnection(connectionIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Get a connection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConnectionTest() throws ApiException {
        ConnectionIdRequestBody connectionIdRequestBody = null;
        ConnectionRead response = 
        api.getConnection(connectionIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Returns all connections for a workspace, including deleted connections.
     *
     * List connections for workspace, including deleted connections.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllConnectionsForWorkspaceTest() throws ApiException {
        WorkspaceIdRequestBody workspaceIdRequestBody = null;
        ConnectionReadList response = 
        api.listAllConnectionsForWorkspace(workspaceIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Returns all connections for a workspace.
     *
     * List connections for workspace. Does not return deleted connections.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConnectionsForWorkspaceTest() throws ApiException {
        WorkspaceIdRequestBody workspaceIdRequestBody = null;
        ConnectionReadList response = 
        api.listConnectionsForWorkspace(workspaceIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetConnectionTest() throws ApiException {
        ConnectionIdRequestBody connectionIdRequestBody = null;
        JobInfoRead response = 
        api.resetConnection(connectionIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Search connections
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchConnectionsTest() throws ApiException {
        ConnectionSearch connectionSearch = null;
        ConnectionReadList response = 
        api.searchConnections(connectionSearch);
        
        // TODO: test validations
    }
    
    /**
     * Trigger a manual sync of the connection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncConnectionTest() throws ApiException {
        ConnectionIdRequestBody connectionIdRequestBody = null;
        JobInfoRead response = 
        api.syncConnection(connectionIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Update a connection
     *
     * Apply a patch-style update to a connection. Only fields present on the update request body will be updated. Note that if a catalog is present in the request body, the connection&#39;s entire catalog will be replaced with the catalog from the request. This means that to modify a single stream, the entire new catalog containing the updated stream needs to be sent. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConnectionTest() throws ApiException {
        ConnectionUpdate connectionUpdate = null;
        ConnectionRead response = 
        api.updateConnection(connectionUpdate);
        
        // TODO: test validations
    }
    
}
