/*
 * Airbyte Configuration API
 * Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@airbyte.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.airbyte.api.client.generated;

import io.airbyte.api.client.invoker.generated.ApiException;
import io.airbyte.api.client.model.generated.CheckOperationRead;
import io.airbyte.api.client.model.generated.ConnectionIdRequestBody;
import io.airbyte.api.client.model.generated.InvalidInputExceptionInfo;
import io.airbyte.api.client.model.generated.NotFoundKnownExceptionInfo;
import io.airbyte.api.client.model.generated.OperationCreate;
import io.airbyte.api.client.model.generated.OperationIdRequestBody;
import io.airbyte.api.client.model.generated.OperationRead;
import io.airbyte.api.client.model.generated.OperationReadList;
import io.airbyte.api.client.model.generated.OperationUpdate;
import io.airbyte.api.client.model.generated.OperatorConfiguration;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for OperationApi
 */
@Ignore
public class OperationApiTest {

    private final OperationApi api = new OperationApi();

    
    /**
     * Check if an operation to be created is valid
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkOperationTest() throws ApiException {
        OperatorConfiguration operatorConfiguration = null;
        CheckOperationRead response = 
        api.checkOperation(operatorConfiguration);
        
        // TODO: test validations
    }
    
    /**
     * Create an operation to be applied as part of a connection pipeline
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOperationTest() throws ApiException {
        OperationCreate operationCreate = null;
        OperationRead response = 
        api.createOperation(operationCreate);
        
        // TODO: test validations
    }
    
    /**
     * Delete an operation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOperationTest() throws ApiException {
        OperationIdRequestBody operationIdRequestBody = null;
        
        api.deleteOperation(operationIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Returns an operation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOperationTest() throws ApiException {
        OperationIdRequestBody operationIdRequestBody = null;
        OperationRead response = 
        api.getOperation(operationIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Returns all operations for a connection.
     *
     * List operations for connection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOperationsForConnectionTest() throws ApiException {
        ConnectionIdRequestBody connectionIdRequestBody = null;
        OperationReadList response = 
        api.listOperationsForConnection(connectionIdRequestBody);
        
        // TODO: test validations
    }
    
    /**
     * Update an operation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOperationTest() throws ApiException {
        OperationUpdate operationUpdate = null;
        OperationRead response = 
        api.updateOperation(operationUpdate);
        
        // TODO: test validations
    }
    
}
